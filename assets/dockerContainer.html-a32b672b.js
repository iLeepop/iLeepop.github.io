import{_ as a,o as e,c as s,a as n}from"./app-5539d687.js";const i={},r=n(`<h1 id="容器" tabindex="-1"><a class="header-anchor" href="#容器" aria-hidden="true">#</a> 容器</h1><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>本篇跳转链接没有实施</p></div><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h2><h3 id="启动流程" tabindex="-1"><a class="header-anchor" href="#启动流程" aria-hidden="true">#</a> 启动流程</h3><p>通过 docker run 命令可以启动运行一个容器。该命令在执行时首先会在本地查找指定的镜像，如果找到了，则直接启动，否则会到镜像中心查找。如果镜像中心存在该镜像，则会下载到本地并启动，如果镜像中心也没有，则直接报错。</p><p>如果再与多架构镜像原理相整合，则就形成了完整的容器启动流程。</p><h3 id="容器启动本质" tabindex="-1"><a class="header-anchor" href="#容器启动本质" aria-hidden="true">#</a> 容器启动本质</h3><p>Docker 容器存在的意义就是为了运行容器中的应用，对外提供服务，所以启动容器的目的就是启动运行该容器中的应用。容器中的应用运行完毕后，容器就会自动终止。所以，如果不想让容器启动后立即终止运行，则就需要使容器应用不能立即结束。通常采用的方式有两种，使应用处于与用户交互的状态或等待状态。</p><h2 id="容器创建并启动" tabindex="-1"><a class="header-anchor" href="#容器创建并启动" aria-hidden="true">#</a> 容器创建并启动</h2><p><a href="#run-%E5%91%BD%E4%BB%A4">docker run</a>用于创建并启动容器，同时会运行容器中指定的应用。这个指定的应用要么通过<a href="#run-%E5%91%BD%E4%BB%A4">docker run</a>中的[command]指定，要么通过容器的 Dockerfile 中的 CMD 指令指定。</p><p>容器两种启动模式：交互模式 -it，分离模式 -d。</p><h3 id="以交互模式运行-ubuntu" tabindex="-1"><a class="header-anchor" href="#以交互模式运行-ubuntu" aria-hidden="true">#</a> 以交互模式运行 ubuntu</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> myu <span class="token parameter variable">-it</span> ubuntu /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>-it 指定以交互模式运行容器，且为容器分配一个伪终端。</li><li>--name 指定当前容器名称</li><li>后面的/bin/bash 用于指定容器启动后需要运行的命令为/bin 下的 bash 命令，而该命令 会启动一个 bash 终端。(Dockerfile 中有写/bin/bash 则运行时不用写)</li></ul><h3 id="以交互模式运行-tomcat" tabindex="-1"><a class="header-anchor" href="#以交互模式运行-tomcat" aria-hidden="true">#</a> 以交互模式运行 tomcat</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mytom <span class="token parameter variable">-it</span> tomcat /bin/bash
<span class="token comment">#通过 ls –l 命令可查看 tomcat 根目录下的文件。注意，不支持 ll 命令。</span>
tomcat<span class="token punctuation">]</span> <span class="token function">ls</span> <span class="token parameter variable">-l</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面也是以交互模式运行 tomcat 容器，不同的是，该命令后没有/bin/bash，此时会正常启动 tomcat。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>: tomcat:8.5.49
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>-p 用于指定端口映射，格式为 暴露给宿主机的端口:容器中应用的端口(如果是使用的厂商的服务器，记得去控制台添加你设置的端口规则)</li></ul><p>回车后会发现 tomcat 已启动，且 tomcat 的日志输出占居了命令行。</p><p>此时在浏览器中通过 8080 端口可以访问到 tomcat。</p><h3 id="以分离模式运行-tomcat" tabindex="-1"><a class="header-anchor" href="#以分离模式运行-tomcat" aria-hidden="true">#</a> 以分离模式运行 tomcat</h3><p>下面是以分离模式运行的 tomcat，返回的是容器 ID。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mytom1 <span class="token parameter variable">-dp</span> <span class="token number">8081</span>:8080 tomcat:8.5.49
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>-d 选项表示以分离模式（detached mode）运行容器即命令在后台运行，命令的运行 与宿主机的运行分离开来。</li></ul><h3 id="以分离模式运行-ubuntu" tabindex="-1"><a class="header-anchor" href="#以分离模式运行-ubuntu" aria-hidden="true">#</a> 以分离模式运行 ubuntu</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> ubuntu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该运行方式存在一个问题：容器使用命令启动了，但通过 docker ps 命令查看不到。</p><p>再通过 docker ps –a 命令可以发现该容器，只不过其已经退出。docker ps 查看的就是 up 状态的容器，由于其已经退出，所以 docker ps 查看不到。</p><h2 id="容器创建" tabindex="-1"><a class="header-anchor" href="#容器创建" aria-hidden="true">#</a> 容器创建</h2><p><a href="#create-%E5%91%BD%E4%BB%A4">docker create</a>命令仅用于创建一个容器，并不会启动容器。<strong>该命令没有-d 选项</strong>，因为<a href="#create-%E5%91%BD%E4%BB%A4">docker create</a>创建的容器默认都是以后台方式来运行的(必须通过<a href="#start-%E5%91%BD%E4%BB%A4">docker start</a> [容器]来启动)，除非在创建时指定 -it。</p><h2 id="容器退出" tabindex="-1"><a class="header-anchor" href="#容器退出" aria-hidden="true">#</a> 容器退出</h2><ul><li>exit：退出并终止当进程。</li><li>ctrl+p+q：退出但不终止当前进程。</li></ul><h2 id="容器状态查看" tabindex="-1"><a class="header-anchor" href="#容器状态查看" aria-hidden="true">#</a> 容器状态查看</h2><p><a href="#ps-%E5%91%BD%E4%BB%A4">docker ps</a>命令中 -a, -q, -l, -n。</p><ul><li>-a 用于查看所有容器，无论是否处于运行状态。</li><li>–q 用于查看所有处于运行状态的容器的 ID。</li><li>–qa 用于查看所有容器的 ID。</li><li>–l 用于查看最后创建的容器，无论该容器是否处于运行状态。</li><li>–n [num] 用于查看最后创建的指定个数的容器，无论该容器是否处于运行状态。</li></ul><h2 id="容器再进" tabindex="-1"><a class="header-anchor" href="#容器再进" aria-hidden="true">#</a> 容器再进</h2><p><a href="#exec-%E5%91%BD%E4%BB%A4">docker exec</a>与<a href="#attach-%E5%91%BD%E4%BB%A4">docker attach</a>的区别与联系</p><h3 id="新建进程进入容器-exec" tabindex="-1"><a class="header-anchor" href="#新建进程进入容器-exec" aria-hidden="true">#</a> 新建进程进入容器 exec</h3><p><a href="#exec-%E5%91%BD%E4%BB%A4">docker exec</a>会创建一个新进程来访问进程，一般与 -it 选项联用，一般使用 exit 命令退出并终止当前进程。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token punctuation">[</span>IMAGE<span class="token punctuation">]</span> /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="外部操作容器-exec" tabindex="-1"><a class="header-anchor" href="#外部操作容器-exec" aria-hidden="true">#</a> 外部操作容器 exec</h3><p>如仅想查看 tomcat 容器中工作目录中所包含的文件，直接在 exec 命令后紧跟要执行的命令即可直接看到其结果。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mytom <span class="token function">ls</span> <span class="token parameter variable">-l</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="容器附加标准输入" tabindex="-1"><a class="header-anchor" href="#容器附加标准输入" aria-hidden="true">#</a> 容器附加标准输入</h3><p><a href="#attach-%E5%91%BD%E4%BB%A4">docker attach</a>不会创建新进程，而是将标准输入与标准输出直接附着在容器进程之上(使用户可以通过键盘来操作容器，使容器中的输出可通过显示器展示给用户)，一般不使用选项。但需要考虑退出容器的方式是使用 exit 还是 ctrl+p+q。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> attach <span class="token punctuation">[</span>IMAGE<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后再使用 exit 命令退出容器。然后会发现容器也停止了。由于 exit 命令的作用是，结束当前进程，所以说明 attach 命令并没有另外再创建新的进程，而是使用了容器进程，exit 命令退出了当前进程，也就退出了容器。</p><h3 id="容器附加标准输出" tabindex="-1"><a class="header-anchor" href="#容器附加标准输出" aria-hidden="true">#</a> 容器附加标准输出</h3><p>启动一个 tomcat 容器与其中的 tomcat，指定容器名称为 mytom。然后通过 docker attach 命令则可看到如下场景：占用了命令行，且没有任何输出，即使通过浏览器访问该 tomcat 也没有任何输出。此时的 mytom 容器已经附加了标准输出，只不过，其输出的是 tomcat 的启停日志信息。</p><p>通过 Ctrl + C 可结束 tomcat，此时可看到停止日志显示了出来。但由于此时的 tomcat 已经停止，tomcat 容器已经退出，所以该 docker attach 命令也就随之结束了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> attach mytom
<span class="token operator">&gt;</span>C
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="容器内进程查看" tabindex="-1"><a class="header-anchor" href="#容器内进程查看" aria-hidden="true">#</a> 容器内进程查看</h2><p><a href="#top-%E5%91%BD%E4%BB%A4">docker top</a>命令后可携带 ps 命令的选项。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">top</span> myu<span class="token comment">#ubuntu</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果容器中运行的进程较多，也可以通过 grep 对结果进行过滤。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">top</span> myu <span class="token operator">|</span> <span class="token function">grep</span> bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="容器日志查看" tabindex="-1"><a class="header-anchor" href="#容器日志查看" aria-hidden="true">#</a> 容器日志查看</h2><p><a href="#logs-%E5%91%BD%E4%BB%A4">docker logs</a>查看的是容器中应用运行日志。这个应用是根据容器创建时命令(<a href="#run-%E5%91%BD%E4%BB%A4">docker run</a>或者<a href="#create-%E5%91%BD%E4%BB%A4">docker create</a>)中的[command]指定，或通过容器镜像的 Dockerfile 中的 CMD 指令指定。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs mytom
<span class="token comment">#</span>
<span class="token function">docker</span> logs myu<span class="token comment">#ubuntu</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看最后的日志" tabindex="-1"><a class="header-anchor" href="#查看最后的日志" aria-hidden="true">#</a> 查看最后的日志</h3><p>通过添加选项-n 或--tail 可以指定要显示的最后几条日志。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs <span class="token parameter variable">-n</span> <span class="token punctuation">[</span>num<span class="token punctuation">]</span> mytom
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看指定时间内的日志" tabindex="-1"><a class="header-anchor" href="#查看指定时间内的日志" aria-hidden="true">#</a> 查看指定时间内的日志</h3><p>通过添加选项--since 可以指定要显示自从指定时间以来的日志。这个时间可以是一个绝对时间，也可以是一个相对时长。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs <span class="token parameter variable">--since</span><span class="token operator">=</span><span class="token string">&quot;2023-09-01&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面使用的是相对时长：显示自从 30 分钟之前产生日志中的最后 3 条。其中 m 表示分，可以使用 s 表示秒，h 表示小时。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs <span class="token parameter variable">--since</span><span class="token operator">=</span>30m <span class="token parameter variable">--tail</span><span class="token operator">=</span><span class="token number">3</span> mytom
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看指定时间外的日志" tabindex="-1"><a class="header-anchor" href="#查看指定时间外的日志" aria-hidden="true">#</a> 查看指定时间外的日志</h3><p>通过添加选项--until 可以指定要显示截止到指定时间之前的日志。这个时间可以是一个绝对时间，也可以是一个相对时长。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs <span class="token parameter variable">--until</span><span class="token operator">=</span><span class="token string">&quot;2023-09-01&quot;</span> <span class="token parameter variable">--tail</span><span class="token operator">=</span><span class="token number">3</span> mytom
<span class="token comment">#</span>
<span class="token function">docker</span> logs <span class="token parameter variable">--until</span><span class="token operator">=</span>5m <span class="token parameter variable">--tail</span><span class="token operator">=</span><span class="token number">3</span> mytom
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看日志时间戳" tabindex="-1"><a class="header-anchor" href="#查看日志时间戳" aria-hidden="true">#</a> 查看日志时间戳</h3><p>要查看某日志的详细时间戳，可以使用-t 选项。下面的命令查看的是最后 3 条日志的时间戳，并与不添加-t 的输出进行了对比。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs <span class="token parameter variable">-t</span> <span class="token parameter variable">--tail</span><span class="token operator">=</span><span class="token number">3</span> mytom
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看动态日志" tabindex="-1"><a class="header-anchor" href="#查看动态日志" aria-hidden="true">#</a> 查看动态日志</h3><p>添加选项-f 可以查看运行中容器的动态日志。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs <span class="token parameter variable">-f</span> <span class="token parameter variable">--tail</span><span class="token operator">=</span><span class="token number">3</span> mytom
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用于查看 mytomcat 的最后三条动态日志。其会占用命令行，一直等待日志的输出。</p><h2 id="容器启停" tabindex="-1"><a class="header-anchor" href="#容器启停" aria-hidden="true">#</a> 容器启停</h2><h3 id="启动" tabindex="-1"><a class="header-anchor" href="#启动" aria-hidden="true">#</a> 启动</h3><p><a href="#start-%E5%91%BD%E4%BB%A4">docker start</a>启动的是容器本身，但容器在启动的同时会启动一个应用，而这个应用是根据容器创建时命令中的[command]指定，或通过容器镜像的 Dockerfile 中的 CMD 指令指定。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> start <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="重启" tabindex="-1"><a class="header-anchor" href="#重启" aria-hidden="true">#</a> 重启</h3><p>通过 docker restart 命令可以重启处于运行状态的指定容器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="优雅停止" tabindex="-1"><a class="header-anchor" href="#优雅停止" aria-hidden="true">#</a> 优雅停止</h3><p>通过 docker stop 命令可以优雅停止指定容器。</p><p>容器停止命令停止的是容器本身，但在容器停止之前会先停止容器中的所有进程的运行，也就停止了对外提供服务的应用进程。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="强制停止" tabindex="-1"><a class="header-anchor" href="#强制停止" aria-hidden="true">#</a> 强制停止</h3><p>通过 docker kill 命令可以强制停止指定容器。所谓强制停止是指，无论容器当前是否被 其它进程访问都直接停止。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">kill</span> <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="停止所有容器" tabindex="-1"><a class="header-anchor" href="#停止所有容器" aria-hidden="true">#</a> 停止所有容器</h3><p>无论是 docker kill 还是 docker stop，都可使用下面方式停止所有容器。因为这两个命令的参数都可以是容器 ID。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">kill</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-qa</span><span class="token variable">)</span></span>
<span class="token comment">#</span>
<span class="token function">docker</span> stop <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-qa</span><span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="暂停" tabindex="-1"><a class="header-anchor" href="#暂停" aria-hidden="true">#</a> 暂停</h3><p><a href="#pause-%E5%91%BD%E4%BB%A4">docker pause</a>仅暂停的是容器对外提供的服务，容器本身没有停止运行，所以容器中的应用也就没有停止运行，只不过其不能通过容器再对外提供服务了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pause <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="解除暂停" tabindex="-1"><a class="header-anchor" href="#解除暂停" aria-hidden="true">#</a> 解除暂停</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> unpause <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="容器删除" tabindex="-1"><a class="header-anchor" href="#容器删除" aria-hidden="true">#</a> 容器删除</h2><p><a href="#rm-%E5%91%BD%E4%BB%A4">docker rm</a>进行容器删除，选项 -f 进行<strong>强制删除</strong>。</p><p>docker rm 命令在默认情况下，要删除的容器必须是已经停止的容器。这个容器可以使用容器名或容器 ID 指定。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a href="#rmi-%E5%91%BD%E4%BB%A4">docker rmi</a>进行镜像删除，选项 -f 进行强制删除，镜像的强制删除不会强制删除 UP 状态的容器的镜像。</p><h2 id="容器与宿主机文件传递" tabindex="-1"><a class="header-anchor" href="#容器与宿主机文件传递" aria-hidden="true">#</a> 容器与宿主机文件传递</h2><ul><li>理解容器本身就是一个文件系统</li><li>理解<a href="#cp-%E5%91%BD%E4%BB%A4">docker cp</a>就是用于完成从一个文件系统复制到另一个文件系统的操作，与容器是否运行无关</li><li>了解<a href="#cp-%E5%91%BD%E4%BB%A4">docker cp</a>不支持容器间的文件复制</li></ul><h3 id="将容器中文件复制到宿主机" tabindex="-1"><a class="header-anchor" href="#将容器中文件复制到宿主机" aria-hidden="true">#</a> 将容器中文件复制到宿主机</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">cp</span> <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">]</span>:/usr/local/*** ./
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令是将容器的中的***目录复制到宿主机的当前目录， 查看宿主机当前目录。</p><h3 id="将宿主机文件复制到容器" tabindex="-1"><a class="header-anchor" href="#将宿主机文件复制到容器" aria-hidden="true">#</a> 将宿主机文件复制到容器</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">cp</span> ./hw.tar <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">]</span>:/usr/local/***
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上命令用于将宿主机中当前目录下的 hw.tar 文件复制到容器的 /usr/local/***目录中。</p><p>查看容器中是否已经存在了 hw.tar 文件，需要首先启动该容器。</p><h3 id="不支持容器间的-cp" tabindex="-1"><a class="header-anchor" href="#不支持容器间的-cp" aria-hidden="true">#</a> 不支持容器间的 cp</h3><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>不支持容器间的 cp</p></div><h2 id="提交容器为镜像" tabindex="-1"><a class="header-anchor" href="#提交容器为镜像" aria-hidden="true">#</a> 提交容器为镜像</h2><p>通过 docker commit 命令可以将一个容器文件系统的当前快照生成为一个新的镜像。</p><h3 id="修改容器层" tabindex="-1"><a class="header-anchor" href="#修改容器层" aria-hidden="true">#</a> 修改容器层</h3><p>首先创建并启动一个容器，例如 centos:7 镜像的容器。然后发现该容器中是没有安装 ifconfig 命令的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>docekr run <span class="token parameter variable">--name</span> mycent <span class="token parameter variable">-it</span> centos:7
<span class="token comment">#安装 net-tools 网络工具命令包。</span>
yum <span class="token function">install</span> <span class="token parameter variable">-y</span> net-tools
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生成镜像" tabindex="-1"><a class="header-anchor" href="#生成镜像" aria-hidden="true">#</a> 生成镜像</h3><p>下面要将已经安装了 ifconfig 命令的容器生成为一个镜像，以方便后期自己或他人使用。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> commit <span class="token parameter variable">-a</span> <span class="token string">&quot;Ilee &lt;ilee@***.com&gt;&quot;</span> <span class="token parameter variable">-m</span> <span class="token string">&quot;Add net-tools&quot;</span> mycent centos7:net-tools
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里指定生成的镜像的[repository]为 centos7，[tag]为 net-tools。</p><h3 id="使用新镜像" tabindex="-1"><a class="header-anchor" href="#使用新镜像" aria-hidden="true">#</a> 使用新镜像</h3><p>使用新生成的镜像创建并启动一个容器，发现其中的 ifconfig 命令是可以使用的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>docekr run <span class="token parameter variable">--name</span> myNetCent <span class="token parameter variable">-it</span> centos7:net-tools
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><a href="#commit-%E5%91%BD%E4%BB%A4">docker commit</a>生成的镜像中包含容器的原镜像的所有分层信息包括历史记录</li></ul><h2 id="容器的导入导出" tabindex="-1"><a class="header-anchor" href="#容器的导入导出" aria-hidden="true">#</a> 容器的导入导出</h2><ul><li>理解<a href="#%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E7%9A%84%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E5%AF%B9%E6%AF%94">容器镜像的导入导出对比</a></li><li>理解 docker export 是对镜像分层合并后视图的文件系统快照的导出，仅包含合并后的一层镜像信息，不包含原镜像分层历史记录。</li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>以下内容 Docker 命令 也有</p></div><h4 id="export-save" tabindex="-1"><a class="header-anchor" href="#export-save" aria-hidden="true">#</a> export/save</h4><ul><li>export 作用于容器，save 作用于镜像，但是导出文件都为 tar 文件</li><li>export 一次只能导出一个容器，save 一次可以对多个镜像进行导出</li><li>export 只是对当前容器的文件系统快照进行导出，其会丢失原镜像的所有历史记录和元数据信息，save 则是保存了原镜像的完整记录</li></ul><h4 id="import-load" tabindex="-1"><a class="header-anchor" href="#import-load" aria-hidden="true">#</a> import/load</h4><ul><li>import 导入的是容器包；load 加载的是镜像包，但是最终都会恢复成镜像</li><li>import 恢复的镜像只包含当前镜像一层,镜像分层合并层；load 恢复的镜像与原镜像是完全相同的，镜像分层信息一致</li><li>import 恢复的镜像就是新构建的镜像，与原镜像的 ImageID 不同；load 恢复的镜像与原镜像是同一个镜像，即 ImageID 相同</li><li>import 可以导入的镜像指定 repository 与 tag，load 加载的镜像不能指定，于原镜像相同</li></ul><h4 id="export-import-commit" tabindex="-1"><a class="header-anchor" href="#export-import-commit" aria-hidden="true">#</a> export&amp;import/commit</h4><ul><li>相同点：export + import 会将一个容器变为一个镜像，commit 也可以</li><li>不同点：export + import 恢复的镜像仅包含原容器生成的一层分层，commit 生成的镜像中包含容器的原镜像的所有分层信息</li></ul><h2 id="docker-system-命令集" tabindex="-1"><a class="header-anchor" href="#docker-system-命令集" aria-hidden="true">#</a> docker system 命令集</h2><p>docker system 是一个命令集，其有四个子命令。</p><ul><li>df 用于查看 docker 各部分占用情况。</li><li>events 可查看指定日间之内(--since)或之 外(--until)在 docker 上所发生的所有事件。这</li><li>info 于查看当前 docker 的详情。</li><li>prune 用于删除 docker 中的无用数据，这些无用数据包含已经停止的 容器、没有任何连接容器的网络、悬空镜像，及悬空镜像的构建缓存。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> system <span class="token function">df</span>
<span class="token comment">#获取更为详细的占用情况，可添加-v 选项。</span>
<span class="token function">docker</span> system <span class="token function">df</span> <span class="token parameter variable">-v</span>

<span class="token function">docker</span> system events <span class="token parameter variable">--since</span><span class="token operator">=</span><span class="token string">&quot;2023-09-01&quot;</span>

<span class="token function">docker</span> system info
<span class="token comment"># == docker info</span>

<span class="token function">docker</span> system prune<span class="token comment">#重点记</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,142),t=[r];function c(d,l){return e(),s("div",null,t)}const p=a(i,[["render",c],["__file","dockerContainer.html.vue"]]);export{p as default};
