import{_ as a,o as e,c as s,a as n}from"./app-5539d687.js";const i={},d=n(`<h1 id="镜像" tabindex="-1"><a class="header-anchor" href="#镜像" aria-hidden="true">#</a> 镜像</h1><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h2><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h3><p>镜像是一种轻量级、可执行的独立软件包，也可以说是一个精简的操作系统。镜像中包含应用软件及应用软件的运行环境。具体来说镜像包含运行某个软件所需的所有内容，包括代码、库、环境变量和配置文件等。几乎所有应用，直接打包为 Docker 镜像后就可以运行。</p><p>由于镜像的运行时是容器，容器的设计初衷就是快速和小巧，所以镜像通常都比较小，镜像中不包含内核，其共享宿主机的内核；镜像中只包含简单的 Shell，或没有 Shell。</p><h3 id="镜像仓库分类" tabindex="-1"><a class="header-anchor" href="#镜像仓库分类" aria-hidden="true">#</a> 镜像仓库分类</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>本 part 大量出现 &#39;[]&#39; 代指 &#39;&lt;&gt;&#39;</p></div><p>镜像中心中存储着大量的镜像仓库 Image Repository，每个镜像仓库中包含着大量相关镜像。根据这些镜像发布者的不同，形成了四类不同的镜像仓库。</p><h4 id="docker-official-image" tabindex="-1"><a class="header-anchor" href="#docker-official-image" aria-hidden="true">#</a> Docker Official Image</h4><p>Docker 官方镜像仓库。该类仓库中的镜像由 Docker 官方构建发布，代码质量较高且安全，有较完善的文档。该类仓库中的镜像会及时更新。一般常用的系统、工具软件、中间件都有相应的官方镜像仓库。例如，Zookeeper、Redis、Nginx 等。</p><p>官方镜像仓库的名称[repository]一般直接为该类软件的名称[software-name]。</p><h4 id="verified-publisher" tabindex="-1"><a class="header-anchor" href="#verified-publisher" aria-hidden="true">#</a> Verified Publisher</h4><p>已验证发布者仓库。该类仓库中的镜像由非 Docker 官方的第三方发布。但该第三方是由 Docker 公司审核认证过的，一般为大型企业、团体或组织。审核通过后，Docker 公司会向其颁发“VERIFIED PUBLISHER”标识。这种仓库中镜像的质量还有有保证的。</p><p>除了官方镜像仓库，其它都是非官方镜像仓库。非官方镜像仓库名称[repository]一般由发布者用户名与软件名称两部分构成，形式为：[username]/[software-name]。</p><h4 id="sponsored-oss" tabindex="-1"><a class="header-anchor" href="#sponsored-oss" aria-hidden="true">#</a> Sponsored OSS</h4><p>由 Docker 公司赞助开发的镜像仓库。该类仓库中的镜像也由非 Docker 官方的第三方发布，但该镜像的开发是由 Docker 公司赞助的。该类型的第三方一般为个人、团队或组织。这种仓库中镜像的质量也是有保证的。</p><h4 id="无认证仓库" tabindex="-1"><a class="header-anchor" href="#无认证仓库" aria-hidden="true">#</a> 无认证仓库</h4><p>没有以上任何标识的仓库。这种仓库中镜像的质量良莠不齐，质量上无法保证，在使用时需谨慎。</p><h3 id="第三方镜像中心" tabindex="-1"><a class="header-anchor" href="#第三方镜像中心" aria-hidden="true">#</a> 第三方镜像中心</h3><p>镜像中心默认使用的都是 Docker 官方的 Docker Hub。不过，镜像中心是可配置的，可以使用指定的第三方镜像中心。对于第三方镜像中心中的仓库名称[repository]由三部分构成：[domain-name]/[username]/[software-name]。其中的[domain-name]指的是第三方镜像中心的域名或 IP。</p><h3 id="镜像定位" tabindex="-1"><a class="header-anchor" href="#镜像定位" aria-hidden="true">#</a> 镜像定位</h3><p>对于任何镜像，都可通过[repository]:[tag]进行唯一定位。其中[tag]一般称为镜像的版本号。[tag]中有一个比较特殊的版本 latest。如果不指定，默认[tag]即为 latest。不过，虽然其字面意思是最新版，一般其也的确存放的是最新版，但并不能保证其真的就是最新版。</p><h2 id="镜像相关命令" tabindex="-1"><a class="header-anchor" href="#镜像相关命令" aria-hidden="true">#</a> 镜像相关命令</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>本篇命令可以去 Docker 命令 查看用法细节</p></div><h3 id="docker-pull" tabindex="-1"><a class="header-anchor" href="#docker-pull" aria-hidden="true">#</a> docker pull</h3><h4 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h4><p>通过 docker pull 命令可以将指定的镜像从 docker hub 拉取到本地。如果没有指定镜像则会抛出一个 Error。例如，下面的命令是拉取 zookeeper 的 3.7.1 版本镜像。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull zookeeper:3.7.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>pull 命令中的也可以不写，此时默认的为 latest。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull zookeeper
<span class="token comment"># == docker pull zookeeper:latest</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查看镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="简化日志输出" tabindex="-1"><a class="header-anchor" href="#简化日志输出" aria-hidden="true">#</a> 简化日志输出</h4><p>加上选项-q 后就可简化拉取过程中的日志输出。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull <span class="token parameter variable">-q</span> ubuntu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="通过-digest-拉取" tabindex="-1"><a class="header-anchor" href="#通过-digest-拉取" aria-hidden="true">#</a> 通过 digest 拉取</h4><p>docker pull 可通过镜像的 digest 进行拉取。语法格式为 docker pull [repository]@[digest]。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>digest，是镜像内容的一个 Hash 值，即所谓的 Content Hash（内容散列）。只要镜像内容发生了变更，其内容散列值就一定会发生改变。注意，digest 是包含前面的 sha256 的，表示该 digest 的产生所采用的 Hash 算法是 SHA256。</p><p><strong>思考</strong> 使用该拉取方式的具体场景或用途。</p></div><p>从 Docker Hub 中具体镜像中可查看到其 digest。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull zookeeper@balabalalbalbla<span class="token comment">#瞎写的bro</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="docker-images" tabindex="-1"><a class="header-anchor" href="#docker-images" aria-hidden="true">#</a> docker images</h3><h4 id="基础用法" tabindex="-1"><a class="header-anchor" href="#基础用法" aria-hidden="true">#</a> 基础用法</h4><p>通过 docker images 命令可查看本地所有镜像资源信息。这些镜像会按照镜像被创建的时间由近及远排序。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>REPOSITORY：镜像仓库名称</li><li>TAG：镜像版本号</li><li>IMAGE ID：镜像的唯一标识</li><li>CREATE：镜像的创建时间</li><li>SIZE：镜像大小</li></ul><h4 id="查看指定镜像" tabindex="-1"><a class="header-anchor" href="#查看指定镜像" aria-hidden="true">#</a> 查看指定镜像</h4><p>docker images 可以查看指定镜像的信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images zookeeper
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="查看完整镜像-id" tabindex="-1"><a class="header-anchor" href="#查看完整镜像-id" aria-hidden="true">#</a> 查看完整镜像 ID</h4><p>默认的 docker images 显示的镜像 id 是经过截取后的显示结果，仅显示了前 12 位。使用 --no-trunc 参数后显示的是完成的镜像 id。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images --no-trunc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="查看镜像-digest" tabindex="-1"><a class="header-anchor" href="#查看镜像-digest" aria-hidden="true">#</a> 查看镜像 digest</h4><p>--digests 选项可以查看所有镜像或指定镜像的 digest 信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images <span class="token parameter variable">--digests</span>
<span class="token comment">#</span>
<span class="token function">docker</span> images ubuntu <span class="token parameter variable">--digest</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="仅显示镜像-id" tabindex="-1"><a class="header-anchor" href="#仅显示镜像-id" aria-hidden="true">#</a> 仅显示镜像 ID</h4><p>-q 选项可仅显示本地所有镜像的 ImageID。该主要是将来与其它命令联合使用。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker images -q
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="过滤镜像" tabindex="-1"><a class="header-anchor" href="#过滤镜像" aria-hidden="true">#</a> 过滤镜像</h4><p>-f 选项用于过滤指定条件的镜像。下面例举一些常用的过滤条件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images <span class="token parameter variable">-f</span> <span class="token assign-left variable">dangling</span><span class="token operator">=</span>true
<span class="token comment">#dangling=true 用于过滤出悬虚镜像，即没有 Repository 与 Tag 的镜像。</span>

<span class="token comment">#-f before 用于列举出本地镜像中指定镜像创建时间之前创建的所有镜像。</span>
<span class="token comment">#-f since 用于列举出本地镜像中指定镜像创建时间之后的创建的所有镜像。</span>
<span class="token comment">#-f reference 用于列举出&lt;repository&gt;:&lt;tag&gt;与指定表达式相匹配的所有镜像。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="格式化显示" tabindex="-1"><a class="header-anchor" href="#格式化显示" aria-hidden="true">#</a> 格式化显示</h4><p>该选项用于格式化输出 docker images 的内容，格式需要使用 GO 模板指定。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images <span class="token parameter variable">--format</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>.Repository<span class="token punctuation">}</span><span class="token punctuation">}</span>:<span class="token punctuation">{</span><span class="token punctuation">{</span>.Tag<span class="token punctuation">}</span><span class="token punctuation">}</span>.<span class="token punctuation">{</span><span class="token punctuation">{</span>.Size<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token comment">#通过使用json.格式 查询某个特定属性名称</span>
<span class="token function">docker</span> images <span class="token parameter variable">--format</span> <span class="token string">&#39;json&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="docker-search" tabindex="-1"><a class="header-anchor" href="#docker-search" aria-hidden="true">#</a> docker search</h3><h4 id="基础用法-1" tabindex="-1"><a class="header-anchor" href="#基础用法-1" aria-hidden="true">#</a> 基础用法</h4><p>通过 docker search 命令可以从 docker hub 上查看指定名称的镜像。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> search ubuntu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="过滤检索结果" tabindex="-1"><a class="header-anchor" href="#过滤检索结果" aria-hidden="true">#</a> 过滤检索结果</h4><p>用于过滤查询结果。例如，下面的是仅查询出官方提供的镜像。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> search ubuntu <span class="token parameter variable">--filter</span> is-official<span class="token operator">=</span>true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="限制检索数量" tabindex="-1"><a class="header-anchor" href="#限制检索数量" aria-hidden="true">#</a> 限制检索数量</h4><p>默认 docker search 显示 25 条检索结果，可通过--limit 选项来指定显示的结果数量。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> search ubuntu <span class="token parameter variable">--limit</span><span class="token operator">=</span><span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="到-hub-官网查看" tabindex="-1"><a class="header-anchor" href="#到-hub-官网查看" aria-hidden="true">#</a> 到 hub 官网查看</h4><p>以上检索方式与从 docker hub 官网 https://hub.docker.com 查看是一样的，但没有官网查看的直观。</p><h3 id="docker-rmi" tabindex="-1"><a class="header-anchor" href="#docker-rmi" aria-hidden="true">#</a> docker rmi</h3><h4 id="基本用法-1" tabindex="-1"><a class="header-anchor" href="#基本用法-1" aria-hidden="true">#</a> 基本用法</h4><p>rmi，remove images。该命令用于删除指定的本地镜像。镜像通过[repository]:[tag]指定。如果省略要删除镜像的 tag，默认删除的是 lastest 版本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> rmi ubuntu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="删除多个镜像" tabindex="-1"><a class="header-anchor" href="#删除多个镜像" aria-hidden="true">#</a> 删除多个镜像</h4><p>docker rmi 命令可一次性删除多个镜像，多个要删除的镜像间使用空格分隔。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> rmi ubuntu:*** ubuntu:***
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="通过-imageid-删除镜像" tabindex="-1"><a class="header-anchor" href="#通过-imageid-删除镜像" aria-hidden="true">#</a> 通过 ImageID 删除镜像</h4><p>docker rmi 也可通过 ImageID 指定要删除的镜像。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> rmi <span class="token punctuation">[</span>IMAGE ID<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="强制删除镜像" tabindex="-1"><a class="header-anchor" href="#强制删除镜像" aria-hidden="true">#</a> 强制删除镜像</h4><p>默认情况下，对于已经运行了容器的镜像是不能删除的，必须要先停止并删除了相关容器然后才能删除其对应的镜像。不过，也可以通过添加-f 选项进行强制删除。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> ubuntu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="删除所有镜像" tabindex="-1"><a class="header-anchor" href="#删除所有镜像" aria-hidden="true">#</a> 删除所有镜像</h4><p>使用组合命令删除所有镜像。当然，如果不携带-f 选项，则不会删除已打开容器的镜像。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> rmi <span class="token punctuation">[</span>-f<span class="token punctuation">]</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> images <span class="token parameter variable">-q</span><span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="导出-导入镜像" tabindex="-1"><a class="header-anchor" href="#导出-导入镜像" aria-hidden="true">#</a> 导出/导入镜像</h3><p>我们在本地生成一个镜像，想将其导出后在另一电脑上使用，则可通过导出/导入镜像 来完成。</p><h4 id="导出镜像-save" tabindex="-1"><a class="header-anchor" href="#导出镜像-save" aria-hidden="true">#</a> 导出镜像 save</h4><p>docker save 命令用于将一个或多个镜像导出为 tar 文件。例如，下面的命令是将 busybox 与 hello-world 镜像导出到当前/root 目录的 my.tar 文件中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> save <span class="token parameter variable">-o</span> my.tar busybox:latest hello-world
<span class="token comment">#</span>
ll
<span class="token comment">#即可看见目录下的my.tar文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="导入镜像-load" tabindex="-1"><a class="header-anchor" href="#导入镜像-load" aria-hidden="true">#</a> 导入镜像 load</h4><p>docker load 用于将一个 tar 文件导入并加载为一个或多个镜像。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> load <span class="token parameter variable">-i</span> my.tar
<span class="token comment">#check</span>
<span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自动化镜像" tabindex="-1"><a class="header-anchor" href="#自动化镜像" aria-hidden="true">#</a> 自动化镜像</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker search [IMAGE]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>AUTOMATED 表示当前镜像是否是“自动化镜像”。自动化镜像就是使用 Docker Hub 连接一个包含 Dockerfile 文件(专门构建镜像用的文件)的 GitHub 仓库或 Bitbucket 仓库的源码托管平台，然后 Docker Hub 就会自动根据 Dockerfile 内容构建镜像。</p><p>这种构建出的镜像会被标记为 AUTOMATED，这种构建镜像的方式称为 Trusted Build（受信构建）。只要 Dockerfile 文件内容发生变化，那么 Docker Hub 就会构建出新的镜像。</p><h2 id="镜像分层" tabindex="-1"><a class="header-anchor" href="#镜像分层" aria-hidden="true">#</a> 镜像分层</h2><h3 id="什么是分层" tabindex="-1"><a class="header-anchor" href="#什么是分层" aria-hidden="true">#</a> 什么是分层</h3><p>Docker 镜像由一些松耦合的只读镜像层组成，Docker Daemon 负责堆叠这些镜像层，并将它们关联为一个统一的整体，即对外表现出的是一个独立的对象。</p><p>通过 docker pull 命令拉取指定的镜像时，每个 Pull complete 结尾的行就代表下载完毕了一个镜像层。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull ubuntu
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.
<span class="token comment">#like</span>
<span class="token comment">#Using default tag: latest</span>
<span class="token comment">#latest: Pulling from library/ubuntu</span>
<span class="token comment">#a6d989asd: Pull complete</span>
<span class="token comment">#....</span>
<span class="token comment">#....</span>
<span class="token comment">#Digest: *****.....</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为什么分层" tabindex="-1"><a class="header-anchor" href="#为什么分层" aria-hidden="true">#</a> 为什么分层</h3><p>采用这种分层结构的优势很多，例如，每个分层都是只读的，所有对分层的修改都是以新分层的形式出现，并不会破坏原分层内容；再如，每个分层只记录变更内容，所以有利于节省存储空间等。</p><p>不过，分层结构的最大的好处是，在不同镜像间实现资源共享，即不同镜像对相同下层镜像的复用。对于 docker pull 命令，其在拉取之前会先获取到其要拉取镜像的所有 ImageID，然后在本地查找是否存在这些分层。如果存在，则不再进行拉取，而是共享本地的该分层。大大节点的存储空间与网络带宽，提升了拉取效率。</p><h3 id="镜像层构成" tabindex="-1"><a class="header-anchor" href="#镜像层构成" aria-hidden="true">#</a> 镜像层构成</h3><p>每个镜像层由两部分构成：镜像文件系统与镜像 json 文件。这两部分具有相同的 ImageID。</p><p>镜像文件系统就是对镜像占有的磁盘空间进行管理的文件系统，拥有该镜像所有镜像层的数据内容。而镜像 json 文件则是用于描述镜像的相关属性的集合，通过 docker inspect [镜像]就可以直观看到。</p><h3 id="镜像-fs-构成" tabindex="-1"><a class="header-anchor" href="#镜像-fs-构成" aria-hidden="true">#</a> 镜像 FS 构成</h3><p>一个 docker 镜像的文件系统 FS 由多层只读的镜像层组成，每层都完成了特定的功能。而这些只读镜像层根据其位置与功能的不同可分为两类：基础镜像层与扩展镜像层。</p><h4 id="基础镜像层" tabindex="-1"><a class="header-anchor" href="#基础镜像层" aria-hidden="true">#</a> 基础镜像层</h4><p>所有镜像的最下层都具有一个可以看得到的基础镜像层 Base Image，基础镜像层的文件系统称为根文件系统 rootfs。而 rootfs 则是建立在 Linux 系统中“看不到的”引导文件系统 bootfs 之上。</p><h4 id="扩展镜像层" tabindex="-1"><a class="header-anchor" href="#扩展镜像层" aria-hidden="true">#</a> 扩展镜像层</h4><p>在基础镜像层之上的镜像层称为扩展镜像层。顾名思义，其是对基础镜像层功能的扩展。在 Dockerfile 中，每条指令都是用于完成某项特定功能的，而每条指令都会生成一个扩展镜像层。</p><h4 id="容器层" tabindex="-1"><a class="header-anchor" href="#容器层" aria-hidden="true">#</a> 容器层</h4><p>一旦镜像运行了起来就形成了容器，而容器就是一个运行中的 Linux 系统，其也是具有文件系统的。容器的这个文件系统是在 docker 镜像最外层之上增加了一个可读写的容器层，对文件的任何更改都只存在于容器层。因此任何对容器的操作都不会影响到镜像本身。</p><p>容器层如果需要修改某个文件，系统会从容器层开始向下一层层的查找该文件，直到找到为止。任何对于文件的操作都会记录在容器层。例如，要修改某文件，容器层会首先把在镜像层找到的文件 copy 到容器层，然后再进行修改。删除文件也只会将存在于容器层中的文件副本删除。</p><p>Docker 容器就是一个叠加后的文件系统，而这个容器层称为 Union File System，联合文件系统。</p><h3 id="linuxos-启动过程-扩展" tabindex="-1"><a class="header-anchor" href="#linuxos-启动过程-扩展" aria-hidden="true">#</a> LinuxOS 启动过程(扩展)</h3><p>进一步学习 linux 后再来填坑😂</p><h2 id="镜像摘要" tabindex="-1"><a class="header-anchor" href="#镜像摘要" aria-hidden="true">#</a> 镜像摘要</h2><p>每个镜像都有一个长度为 64 位的 16 进制字符串作为其摘要 digest。</p><h3 id="查看" tabindex="-1"><a class="header-anchor" href="#查看" aria-hidden="true">#</a> 查看</h3><p>在 docker pull 镜像结束后会给出该拉取的镜像的摘要 digest。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>docekr pull <span class="token punctuation">[</span>IMAGE<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过 docker inspect 命令可以查看指定镜像的详细信息。其中就包含该镜像的摘要信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect <span class="token punctuation">[</span>IMAGE<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过 docker images --digests 命令也可以查看到镜像的摘要信息。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker images [IMAGE] --digests
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="是什么" tabindex="-1"><a class="header-anchor" href="#是什么" aria-hidden="true">#</a> 是什么</h3><p>摘要，即 digest，是镜像内容的一个 Hash 值，即所谓的 Content Hash（内容散列）。只要镜像内容发生了变更，其内容散列值就一定会发生改变。也就是说，一个镜像一旦创建完毕，其 digest 就不会发生改变了，因为镜像是只读的。</p><p>Docker 默认采用的 Hash 算法是 SHA256，即 Hah 值是一个长度为 256 位的二进制值。Docker 使用 16 进制表示，即变为了长度为 64 位的字符串。</p><h3 id="有何用" tabindex="-1"><a class="header-anchor" href="#有何用" aria-hidden="true">#</a> 有何用</h3><p>摘要的主要作用是区分相同[repository]:[tag]的不同镜像。</p><p>如果镜像在生产运行过程中发现存在一个 BUG。现对其进行了修复，并使用原 标签将其 push 回了仓库，那么原镜像被覆盖。但生产环境中遗留了大量运行中的修复前镜 像的容器。此时，通过镜像标签已经无法区分镜像是修复前的还是修复后的了，因为它们的 标签是相同的。此时通过查看镜像的 digest 就可以区分出修改前后版本，因为内容发生了变 化，digest 一定会变。</p><p>为了确保再次拉取到的是修复后的镜像，可通过 digest 进行镜像拉取。</p><p>其用法是：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull <span class="token punctuation">[</span>repository<span class="token punctuation">]</span>@<span class="token punctuation">[</span>digest<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不方便的是，镜像的摘要需要由运维人员在本地进行手工维护。</p><h3 id="分发散列值" tabindex="-1"><a class="header-anchor" href="#分发散列值" aria-hidden="true">#</a> 分发散列值</h3><p>在 push 或 pull 镜像时，都会对镜像进行压缩以减少网络带宽和传输时长。但压缩会改变镜像内容，会导致经过网络传输后，镜像内容与其 digest 不相符。出现问题。</p><p>为了避免该问题，Docker 又为镜像配置了 Distribution Hash（分发散列值）。在镜像被压缩后立即计算分发散列值，然后使该值随压缩过的镜像一同进行发送。在接收方接收后，立即计算压缩镜像的分发散列值，再与携带的分发散列值对比。如果相同，则说明传输没有问题。</p><h2 id="多架构镜像" tabindex="-1"><a class="header-anchor" href="#多架构镜像" aria-hidden="true">#</a> 多架构镜像</h2><h3 id="简介-1" tabindex="-1"><a class="header-anchor" href="#简介-1" aria-hidden="true">#</a> 简介</h3><p>Multi-architecture Image，即多架构镜像，是某[repository]中的某[tag]镜像针对不同操作系统/系统架构的不同镜像实现。即多架构镜像中包含的镜像的[repository]:[tag]都是相同的，但它们针对的操作系统/系统架构是不同的。</p><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h3><p>无论用户使用的是什么操作系统/系统架构，其通过 docker pull 命令拉取到的一定是针对该操作系统/系统架构的镜像，无需用户自己考虑操作系统/系统架构问题。Docker Hub 能够根据提交 pull 请求的 Docker 系统的架构自动选择其对应的镜像。</p><p>在 Docker Hub 中，镜像的多架构信息保存在 Manifest 文件中。在拉取镜像时，Docker 会随着 pull 命令将当前 Docker 系统的 OS 与架构信息一并提交给 Docker Hub。Docker Hub 首先会根据镜像的[repository]:[tag]查找是否存在 Manifest。如果不存在，则直接查找并返回[repository]:[tag]镜像即可；如果存在，则会在 Manifest 中查找是否存在指定系统/架构的镜像。如果存在该系统/架构，则根据 Manifest 中记录的地址找到该镜像的位置。</p><h2 id="悬空镜像" tabindex="-1"><a class="header-anchor" href="#悬空镜像" aria-hidden="true">#</a> 悬空镜像</h2><p>悬空镜像是指既没有 Repository 也没有 Tag 的镜像。当新建一个镜像后，为该镜像定了一个已经存在的 TAG，那么原来的镜像就会变成悬空镜像。</p><p><strong>演示</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
//
<span class="token operator">&lt;</span>REPOSITORY<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>TAG<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token punctuation">..</span>.<span class="token operator">&gt;</span> <span class="token punctuation">..</span>.
centos7      latest <span class="token punctuation">..</span>. <span class="token number">1</span>
<span class="token punctuation">..</span>.
//
<span class="token function">docker</span> build <span class="token parameter variable">-t</span> centos7 <span class="token builtin class-name">.</span>
//
<span class="token function">docker</span> images
//
<span class="token operator">&lt;</span>REPOSITORY<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>TAG<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token punctuation">..</span>.<span class="token operator">&gt;</span> <span class="token punctuation">..</span>.
none         none <span class="token punctuation">..</span>. <span class="token number">1</span> //旧
centos7      latest <span class="token punctuation">..</span>. <span class="token number">2</span> //新
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用<a href="">docker image prune</a>删除无用的镜像，这是专门的删除命令。</p><p>也可以使用<a href="#prune">docker system prune</a>删除 docker 中无用的数据，无用数据包含已经停止的容器，没有任何连接容器的网络，悬空镜像以及悬空镜像的构建缓存。</p>`,160),r=[d];function c(t,l){return e(),s("div",null,r)}const p=a(i,[["render",c],["__file","dockerImage.html.vue"]]);export{p as default};
