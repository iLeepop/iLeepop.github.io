import{_ as n,o as s,c as a,a as e}from"./app-5539d687.js";const i={},t=e(`<h1 id="网络" tabindex="-1"><a class="header-anchor" href="#网络" aria-hidden="true">#</a> 网络</h1><h1 id="基础知识" tabindex="-1"><a class="header-anchor" href="#基础知识" aria-hidden="true">#</a> 基础知识</h1><p>Docker 网络中的相关命令非常少，但需要掌握的底层原理相对较多。</p><h2 id="network-namespace" tabindex="-1"><a class="header-anchor" href="#network-namespace" aria-hidden="true">#</a> Network Namespace</h2><p>Docker 网络的底层原理是 Linux 的 Network Namespace，所以对于 Linux Network Namespace 的理解对 Docker 网络底层原理的理解非常重要。</p><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h3><p>Network Namespace 是 Linux 内核提供的用于实现网络虚拟化的重要功能，它能创建多 个隔离的网络空间，每个独立的网络空间内的防火墙、网卡、路由表、邻居表、协议栈都是 独立的。不管是虚拟机还是容器，当运行在独立的命名空间时，就像是一台单独的主机一样。</p><h3 id="需求" tabindex="-1"><a class="header-anchor" href="#需求" aria-hidden="true">#</a> 需求</h3><p>下面要通过手工方式创建两个 Network Namespace，并最终让它们相互连通，即可以通 过 ping 命令测试成功。以使大家能够理解 Docker 网络的底层原理。</p><h3 id="创建两个命名空间" tabindex="-1"><a class="header-anchor" href="#创建两个命名空间" aria-hidden="true">#</a> 创建两个命名空间</h3><p>分别创建两个命名空间 ns1 与 ns2。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#ns1 created</span>
<span class="token function">ip</span> netns <span class="token function">add</span> ns1
<span class="token comment">#ns2 created</span>
<span class="token function">ip</span> netns <span class="token function">add</span> ns2
<span class="token comment">#check list</span>
<span class="token function">ip</span> netns list
ns2
ns1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为每个网络空间都是独立的，所以每个 Network Namespace 都具有一个回环网络适配器 IO。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#</span>
<span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns1 <span class="token function">ip</span> a
<span class="token comment">#</span>
<span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns2 <span class="token function">ip</span> a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建网络接口-veth-pair" tabindex="-1"><a class="header-anchor" href="#创建网络接口-veth-pair" aria-hidden="true">#</a> 创建网络接口 veth pair</h3><p>如果要让两个命名空间连通，则需要用到虚拟设备接口技术 veth pair。该技术需要一对 网络接口分别置于两个命名空间中。</p><p>以下命令用于创建一对网络接口 veth-ns1 与 veth-ns2。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> <span class="token function">link</span> <span class="token function">add</span> veth-ns1 <span class="token builtin class-name">type</span> veth peer name veth-ns2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时通过 ip link 查看当前的网络地址情况，可以看到新增了两个相互连通的 veth pair， 它们都具有 MAC 地址，但它们的状态都是 DOWN，且都不具有 IP。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#查看</span>
<span class="token function">ip</span> <span class="token function">link</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token number">30</span>: veth-ns2@veth-ns1: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,M-DOWN<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noop state DOWN mode DEFAULT group default qlen <span class="token number">1000</span>
    link/ether <span class="token number">36</span>:f6:38:0f:35:b0 brd ff:ff:ff:ff:ff:ff
<span class="token number">31</span>: veth-ns1@veth-ns2: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,M-DOWN<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noop state DOWN mode DEFAULT group default qlen <span class="token number">1000</span>
    link/ether 02:d6:f5:5a:68:aa brd ff:ff:ff:ff:ff:ff
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命名空间添加-veth-接口" tabindex="-1"><a class="header-anchor" href="#命名空间添加-veth-接口" aria-hidden="true">#</a> 命名空间添加 veth 接口</h3><p>通过 ip link set 命令，将这两个网络接口分别分配给两个命名空间。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#</span>
<span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> veth-ns1 netns ns1
<span class="token comment">#</span>
<span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> veth-ns2 netns ns2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时分别在两个命名空间中执行 ip link 命令，可以查看到，它们中分别新增了前面指定 的一个网络接口。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns1 <span class="token function">ip</span> <span class="token function">link</span>
<span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns2 <span class="token function">ip</span> <span class="token function">link</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时再在主机中查看 ip link，发现原来的那两个网络接口已经消失了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#查看</span>
<span class="token function">ip</span> <span class="token function">link</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为-veth-接口分配-ip" tabindex="-1"><a class="header-anchor" href="#为-veth-接口分配-ip" aria-hidden="true">#</a> 为 veth 接口分配 IP</h3><p>前面创建的两个网络接口是没有 IP 的。下面要通过 ip netns exec 命令，为每个指定的命 名空间执行 IP 添加命令 ip addr add [ip] dev [网络接口]。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns1 <span class="token function">ip</span> addr <span class="token function">add</span> <span class="token number">192.168</span>.1.1/24 dev veth-ns1
<span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns2 <span class="token function">ip</span> addr <span class="token function">add</span> <span class="token number">192.168</span>.1.2/24 dev veth-ns2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为 ns1 的 veth-ns1 网络接口分配的 IP 为 192.168.1.1，掩码为 24；为 ns2 的 veth-ns2 网 络接口分配的 IP 为 192.168.1.2，掩码为 24。</p><p>此时通过在 ns1 与 ns2 中运行 ip a 命令，便可看到为接口分配的 IP 了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns1 <span class="token function">ip</span> a
<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noop state DOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
<span class="token number">31</span>: veth-ns1@if30: <span class="token operator">&lt;</span>BROADCAST,MULTICAST<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noop state DOWN group default qlen <span class="token number">1000</span>
    link/ether 02:d6:f5:5a:68:aa brd ff:ff:ff:ff:ff:ff link-netnsid <span class="token number">1</span>
    inet <span class="token number">192.168</span>.1.1/24 scope global veth-ns1
       valid_lft forever preferred_lft forever
<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token comment">#ns2</span>
<span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns2 <span class="token function">ip</span> a
<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noop state DOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
<span class="token number">30</span>: veth-ns2@if31: <span class="token operator">&lt;</span>BROADCAST,MULTICAST<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noop state DOWN group default qlen <span class="token number">1000</span>
    link/ether <span class="token number">36</span>:f6:38:0f:35:b0 brd ff:ff:ff:ff:ff:ff link-netnsid <span class="token number">0</span>
    inet <span class="token number">192.168</span>.1.2/24 scope global veth-ns2
       valid_lft forever preferred_lft forever
<span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启动-veth-接口" tabindex="-1"><a class="header-anchor" href="#启动-veth-接口" aria-hidden="true">#</a> 启动 veth 接口</h3><p>以上两个命名空间中的 veth 接口已经具有了 IP，但其状态仍为 DOWN，还没有开启。 下面要通过 ip link set dev [接口] up 来启动指定的网络接口。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns1 <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> dev veth-ns1 up
<span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns2 <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> dev veth-ns2 up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时再通过 ip a 命令查看两接口的状态，已经变为了 UP。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns1 <span class="token function">ip</span> a
<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noop state DOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
<span class="token number">31</span>: veth-ns1@if30: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue <span class="token punctuation">[</span>state UP<span class="token punctuation">]</span> group default qlen <span class="token number">1000</span>
    link/ether 02:d6:f5:5a:68:aa brd ff:ff:ff:ff:ff:ff link-netnsid <span class="token number">1</span>
    inet <span class="token number">192.168</span>.1.1/24 scope global veth-ns1
       valid_lft forever preferred_lft forever
    inet6 fe80::d6:f5ff:fe5a:68aa/64 scope <span class="token function">link</span>
       valid_lft forever preferred_lft forever
<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token comment">#ns2</span>
<span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns2 <span class="token function">ip</span> a
<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noop state DOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
<span class="token number">30</span>: veth-ns2@if31: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue <span class="token punctuation">[</span>state UP<span class="token punctuation">]</span> group default qlen <span class="token number">1000</span>
    link/ether <span class="token number">36</span>:f6:38:0f:35:b0 brd ff:ff:ff:ff:ff:ff link-netnsid <span class="token number">0</span>
    inet <span class="token number">192.168</span>.1.2/24 scope global veth-ns2
       valid_lft forever preferred_lft forever
    inet6 fe80::34f6:38ff:fe0f:35b0/64 scope <span class="token function">link</span>
       valid_lft forever preferred_lft forever
<span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="相互-ping" tabindex="-1"><a class="header-anchor" href="#相互-ping" aria-hidden="true">#</a> 相互 ping</h3><p>此时可以通过在两个命名空间中执行 ping 命令来与对方进行连通性测试了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns1 <span class="token function">ping</span> <span class="token number">192.168</span>.1.2
<span class="token comment">#ns2</span>
<span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> ns2 <span class="token function">ping</span> <span class="token number">192.168</span>.1.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cnm" tabindex="-1"><a class="header-anchor" href="#cnm" aria-hidden="true">#</a> CNM</h2><p>Docker 网络架构由三个主要部分构成：CNM、Libnetwork 与 Driver。</p><p>CNM，Container Network Model，容器网络模型，其是一种网络连接的解决方案，是一 种设计规范、设计标准，其规定了 Docker 网络的基础组成要素。</p><p>CNM 中定义了三个基本要素：沙盒 Sandbox，终端 Endpoint 与网络 Network。</p><ul><li>沙盒：一个独立的网络栈，其中包括以太网接口、端口号、路由表、DNS 配置等。Linux Network Namespace 是沙盒的标准实现。</li><li>终端：虚拟网络接口，主要负责创建连接，即将沙盒连接到网络上。一个终端只能接入 某一个网络。</li><li>网络：802.1d 网桥的软件实现，是需要交互的终端的集合。</li></ul><h2 id="libnetwork" tabindex="-1"><a class="header-anchor" href="#libnetwork" aria-hidden="true">#</a> Libnetwork</h2><p>CNM 是设计规范，而 Libnetwork 是开源的、由 Go 语言编写的、跨平台的 CNM 的标准实现。</p><p>Libnetwork 除了实现了 CNM 的三个组件，还实现了本地服务发现、容器负载均衡，以及网络控制层与管理层功能。</p><h2 id="driver" tabindex="-1"><a class="header-anchor" href="#driver" aria-hidden="true">#</a> Driver</h2><p>每种不同的网络类型都有对应的不同的底层 Driver，这些 Driver 负责在主机上真正实现需要的网络功能，例如创建 veth pair 设备等。</p><p>不过，无论哪种网络类型，其工作方式都是类似的。通过调用 Docker 引擎的 API 发出请求，然后由 Libnetwork 做出框架性的处理，然后将请求转发给相应的 Driver。</p><p>通过 docker network ls 命令可以查看当前主机所连接的网络及网络类型。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="bridge-网络" tabindex="-1"><a class="header-anchor" href="#bridge-网络" aria-hidden="true">#</a> bridge 网络</h2><p>bridge 网络，也称为单机桥接网络，是 Docker 默认的网络模式。该网络模式只能存在 于单个 Docker 主机上，其只能用于连接所在 Docker 主机上的容器。</p><h3 id="docker0-网桥" tabindex="-1"><a class="header-anchor" href="#docker0-网桥" aria-hidden="true">#</a> docker0 网桥</h3><h4 id="查看-docker0-网桥" tabindex="-1"><a class="header-anchor" href="#查看-docker0-网桥" aria-hidden="true">#</a> 查看 docker0 网桥</h4><p>bridge 网络模式中具有一个默认的虚拟网桥 docker0，通过 ip a 或 ifconfig 命令都可查看 到。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> a
<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token number">3</span>: docker0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue state UP group default
    link/ether 02:42:8a:bf:39:c1 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.17</span>.0.1/16 brd <span class="token number">172.17</span>.255.255 scope global docker0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:8aff:febf:39c1/64 scope <span class="token function">link</span>
       valid_lft forever preferred_lft forever
<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token comment">#</span>
<span class="token function">ifconfig</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token number">3</span>: docker0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue state UP group default
    link/ether 02:42:8a:bf:39:c1 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.17</span>.0.1/16 brd <span class="token number">172.17</span>.255.255 scope global docker0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:8aff:febf:39c1/64 scope <span class="token function">link</span>
       valid_lft forever preferred_lft forever
<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token comment">#</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 docker network inspect bridge 也可以查看到网络名称为 bridge 的网络的详情。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network inspect bridge
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到该网络的驱动为 bridge，其网桥名称为 docker0。只不过，目前该网络上还没 有连接任何容器。</p><h4 id="docker0-网桥工作原理" tabindex="-1"><a class="header-anchor" href="#docker0-网桥工作原理" aria-hidden="true">#</a> docker0 网桥工作原理</h4><p>在 Linux 主机上，Docker 的 bridge 网络由 Bridge 驱动创建，其在创建时会创建一个默认 的网桥 docker0。容器与网桥间是通过 veth pair 技术实现的连接，网桥与外网间是通过“网 络地址转换 NAT 技术”实现的连接，即将通信的数据包中的内网地址转换为外网地址。</p><p>Bridge 驱动的底层是基于 Linux 内核的 Linux Bridge 技术。该技术已经经历了近 20 年的 考验，这就意味着该模式是高性能且非常稳定的。</p><h3 id="查看网络连接详情" tabindex="-1"><a class="header-anchor" href="#查看网络连接详情" aria-hidden="true">#</a> 查看网络连接详情</h3><h4 id="查看-bridge-网络整体连接" tabindex="-1"><a class="header-anchor" href="#查看-bridge-网络整体连接" aria-hidden="true">#</a> 查看 bridge 网络整体连接</h4><p>现在通过 docker network inspect 命令查看当前 bridge 网络的整体连接情况。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network inspect bridge
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 Containers 中可以查看到当前名称为 bridge 的网络中连接的 bb1 与 bb2 两个容器。这两个容器及宿主机，其实就是三个完全独立的 Network Namespace。</p><h4 id="查看宿主机接口" tabindex="-1"><a class="header-anchor" href="#查看宿主机接口" aria-hidden="true">#</a> 查看宿主机接口</h4><p>此时在宿主机上通过 ip a 命令查看当前主机的网络接口情况。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> a
<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope <span class="token function">host</span>
       valid_lft forever preferred_lft forever
<span class="token number">2</span>: eth0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc mq state UP group default qlen <span class="token number">1000</span>
    link/ether <span class="token number">52</span>:54:00:57:27:ea brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">10.0</span>.8.5/22 brd <span class="token number">10.0</span>.11.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::5054:ff:fe57:27ea/64 scope <span class="token function">link</span>
       valid_lft forever preferred_lft forever
<span class="token number">3</span>: docker0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue state UP group default
    link/ether 02:42:8a:bf:39:c1 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.17</span>.0.1/16 brd <span class="token number">172.17</span>.255.255 scope global docker0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:8aff:febf:39c1/64 scope <span class="token function">link</span>
       valid_lft forever preferred_lft forever
<span class="token number">19</span>: vethf6a7340@if18: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue master docker0 state UP group default
    link/ether <span class="token number">32</span>:5b:c0:2b:e7:97 brd ff:ff:ff:ff:ff:ff link-netnsid <span class="token number">0</span>
    inet6 fe80::305b:c0ff:fe2b:e797/64 scope <span class="token function">link</span>
       valid_lft forever preferred_lft forever
<span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发现除了回环地址 lo，本地网卡 ens33，网桥 docker0 外，还有两个 veth 网络接口。这两个 veth 就是由 Libnetwork 生成的 veth pair 中的宿主机中的 EndPoint。</p><ul><li>19: vethf6a7340@if18 表示这是第 5 个接口，其用于连接外部的第 4 个接口</li></ul><h4 id="查看容器接口" tabindex="-1"><a class="header-anchor" href="#查看容器接口" aria-hidden="true">#</a> 查看容器接口</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>容器名称<span class="token punctuation">]</span> <span class="token function">ip</span> a
<span class="token comment">#以下我的容器例子</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> mytom <span class="token function">ip</span> a
<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
<span class="token number">18</span>: eth0@if19: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue state UP group default
    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid <span class="token number">0</span>
    inet <span class="token number">172.17</span>.0.2/16 brd <span class="token number">172.17</span>.255.255 scope global eth0
       valid_lft forever preferred_lft forever
<span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在容器中分别使用 ip a 命令查看地址情况，可以看到均包含 eth0 的接口。 其中的接口 18，即 eth0@if19，其用于连接宿主机的第 19 个接口。</p><p>它们的接口正好与宿主机中的接口构成一对 pair。</p><h4 id="查看网桥连接" tabindex="-1"><a class="header-anchor" href="#查看网桥连接" aria-hidden="true">#</a> 查看网桥连接</h4><p>这里要使用一个专门用于网桥控制管理的命令 brctl。由于该命令默认在 Linux 中没有安 装，所以需要首先安装一个网桥的工具包 bridge-utils。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> bridge-utils
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 brctl show 命令可以查看本机当前所有网桥及其连接情况。可以看到，当前宿主机 中只有一个网桥 docker0，其上连接着一个 vethxxx 的接口，就是前面连接 mytom 上的 eth0 的接口。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>brctl show
<span class="token punctuation">..</span><span class="token punctuation">..</span>
bridge name     bridge <span class="token function">id</span>               STP enabled     interfaces
docker0         <span class="token number">8000</span>.02428abf39c1       no              vethf6a7340
<span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查看容器详情" tabindex="-1"><a class="header-anchor" href="#查看容器详情" aria-hidden="true">#</a> 查看容器详情</h4><p>通过 docker inspect 查看容器的详情，可以看到，其网络连接中的网关 Geteway 的 IP 地址就是 docker0 网桥的地址。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker inspect mytom
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="网络创建" tabindex="-1"><a class="header-anchor" href="#网络创建" aria-hidden="true">#</a> 网络创建</h3><h4 id="创建网络" tabindex="-1"><a class="header-anchor" href="#创建网络" aria-hidden="true">#</a> 创建网络</h4><p>通过 docker network create 命令可以创建指定名称与类型的网络。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network create <span class="token parameter variable">-d</span> bridge bridge2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>-d 选项用于指定要创建网络时所使用的驱动，即创建的网络类型。最后的 bridge2 则是新创建网络的名称。</p><h4 id="查看宿主机支持网络" tabindex="-1"><a class="header-anchor" href="#查看宿主机支持网络" aria-hidden="true">#</a> 查看宿主机支持网络</h4><p>此时通过 docker network ls 可查看到新创建的网络。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="查看宿主机网桥" tabindex="-1"><a class="header-anchor" href="#查看宿主机网桥" aria-hidden="true">#</a> 查看宿主机网桥</h4><p>通过 brctl show 命令可以查看到新增了一个网桥，只不过该网桥暂时还没有任何连接的 网络接口。该网桥就是在创建新的网络时自动创建的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>brctl show
<span class="token punctuation">..</span><span class="token punctuation">..</span>
bridge name     bridge <span class="token function">id</span>               STP enabled     interfaces
docker0         <span class="token number">8000</span>.02428abf39c1       no              vethf6a7340
<span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建容器指定网络" tabindex="-1"><a class="header-anchor" href="#创建容器指定网络" aria-hidden="true">#</a> 创建容器指定网络</h3><h4 id="创建容器" tabindex="-1"><a class="header-anchor" href="#创建容器" aria-hidden="true">#</a> 创建容器</h4><p>现在要创建一个新的 BusyBox 容器 bb，其连接在新建的 bridge2 网络上。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> bb <span class="token parameter variable">--network</span> bridge2 busybox /bin/sh <span class="token parameter variable">-c</span> <span class="token string">&quot;while true; do sleep 3600; done&quot;</span>
<span class="token comment">#no busybox look here</span>
<span class="token function">docker</span> pull busybox<span class="token punctuation">[</span>:tag<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在创建容器时通过--network 指定要连接到的网络，如果不指定，默认连接到默认的 bridge 网络。</p><h4 id="查看新建网络详情" tabindex="-1"><a class="header-anchor" href="#查看新建网络详情" aria-hidden="true">#</a> 查看新建网络详情</h4><p>此时查看 bridge2 的网络详情，可以看到容器 bb3 已经连接到了上面。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network inspect bridge2
<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token string">&quot;Containers&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;9ace90e54c607d2a8784628f10575471d18847b8cb5ebe2e4cc959ee922dace4&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;Name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;bb&quot;</span>,
                <span class="token string">&quot;EndpointID&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;225afc1bec099eb6ea2498f13e011c7c83f14216344f68e5d607e35e8e7e2788&quot;</span>,
                <span class="token string">&quot;MacAddress&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;02:42:ac:12:00:02&quot;</span>,
                <span class="token string">&quot;IPv4Address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;172.18.0.2/16&quot;</span>,
                <span class="token string">&quot;IPv6Address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查看宿主机网络接口" tabindex="-1"><a class="header-anchor" href="#查看宿主机网络接口" aria-hidden="true">#</a> 查看宿主机网络接口</h4><p>此时查看当前宿主机的网络接口情况，发现多出了两个接口。其中一个是 32 号接口，其 为网桥 br-xxx，一个是 36 号接口，其是连接 bb 的接口 vethxxx@if35。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> a
<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token number">32</span>: br-a19ca8dcfc5a: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue state UP group default
    link/ether 02:42:97:8b:c1:62 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.18</span>.0.1/16 brd <span class="token number">172.18</span>.255.255 scope global br-a19ca8dcfc5a
       valid_lft forever preferred_lft forever
    inet6 fe80::42:97ff:fe8b:c162/64 scope <span class="token function">link</span>
       valid_lft forever preferred_lft forever
<span class="token number">36</span>: veth02a9a19@if35: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue master br-a19ca8dcfc5a state UP group default
    link/ether ba:12:cb:73:91:20 brd ff:ff:ff:ff:ff:ff link-netnsid <span class="token number">3</span>
    inet6 fe80::b812:cbff:fe73:9120/64 scope <span class="token function">link</span>
       valid_lft forever preferred_lft forever
<span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查看新增容器网络接口" tabindex="-1"><a class="header-anchor" href="#查看新增容器网络接口" aria-hidden="true">#</a> 查看新增容器网络接口</h4><p>此时查看容器 bb 的网络接口，发现其 35 号接口正好是宿主机 36 号接口的 pair 接口。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> bb <span class="token function">ip</span> a
<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noqueue qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
<span class="token number">35</span>: eth0@if36: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue
    link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.18</span>.0.2/16 brd <span class="token number">172.18</span>.255.255 scope global eth0
       valid_lft forever preferred_lft forever
<span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查看宿主机网桥-1" tabindex="-1"><a class="header-anchor" href="#查看宿主机网桥-1" aria-hidden="true">#</a> 查看宿主机网桥</h4><p>此时再查看网桥情况，发现新增网桥上增加了一个接口，而该接口正好就是宿主机上的 36 号接口。</p><p>并且，该接口与 bridge 网络不是同一 网段，所以它们之间是不能相互通信的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>brctl show
<span class="token punctuation">..</span><span class="token punctuation">..</span>
bridge name     bridge <span class="token function">id</span>               STP enabled     interfaces
br-a19ca8dcfc5a         <span class="token number">8000</span>.0242978bc162       no            <span class="token operator">&gt;&gt;</span>veth02a9a1<span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span><span class="token operator">&lt;</span>
docker0         <span class="token number">8000</span>.02428abf39c1       no              vethf6a7340
<span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="容器连接到指定网络" tabindex="-1"><a class="header-anchor" href="#容器连接到指定网络" aria-hidden="true">#</a> 容器连接到指定网络</h3><h4 id="连接到指定网络" tabindex="-1"><a class="header-anchor" href="#连接到指定网络" aria-hidden="true">#</a> 连接到指定网络</h4><p>现在要将容器 bb1 连接到新建的 bridge2 网络上。可以使用 docker network connect 命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#created bb1 connect bridge</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> bb1 <span class="token parameter variable">--network</span> bridge busybox /bin/sh <span class="token parameter variable">-c</span> <span class="token string">&quot;while true; do sleep 3600; done&quot;</span>
<span class="token comment">#重新连接至bridge2</span>
<span class="token function">docker</span> network connect bridge2 bb1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查看两个网络详情" tabindex="-1"><a class="header-anchor" href="#查看两个网络详情" aria-hidden="true">#</a> 查看两个网络详情</h4><p>此时查看 bridge2 的网络详情中的容器情况，发现 bb 与 bb1 都在该网络上。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network inspect bridge2
<span class="token punctuation">..</span><span class="token punctuation">..</span>
 <span class="token string">&quot;Containers&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;9ace90e54c607d2a8784628f10575471d18847b8cb5ebe2e4cc959ee922dace4&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;Name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;bb&quot;</span>,
                <span class="token string">&quot;EndpointID&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;225afc1bec099eb6ea2498f13e011c7c83f14216344f68e5d607e35e8e7e2788&quot;</span>,
                <span class="token string">&quot;MacAddress&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;02:42:ac:12:00:02&quot;</span>,
                <span class="token string">&quot;IPv4Address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;172.18.0.2/16&quot;</span>,
                <span class="token string">&quot;IPv6Address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>
            <span class="token punctuation">}</span>,
            <span class="token string">&quot;fca1467bc863fea6af9453577a1c3a1cbedc5d7b55455ffcc54dad5ae5f1667e&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;Name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;bb1&quot;</span>,
                <span class="token string">&quot;EndpointID&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;c5ea77741b223c9da6c369b6be4cfdc3b10db427b3bc0c018a6970337a42b179&quot;</span>,
                <span class="token string">&quot;MacAddress&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;02:42:ac:12:00:03&quot;</span>,
                <span class="token string">&quot;IPv4Address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;172.18.0.3/16&quot;</span>,
                <span class="token string">&quot;IPv6Address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>,
<span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再查看原来的 bridge 网络详情的容器情况，发现 bb1 仍连接在其上。即，bb1 容器 同时连接在了两个网络上。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network inspect bridge
<span class="token punctuation">..</span><span class="token punctuation">..</span>
 <span class="token string">&quot;Containers&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;132e8c4b65f7752b708371be437d57e12a6b4bae708ddd4ef8b6b5cf0a0936ab&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;Name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;mytom&quot;</span>,
                <span class="token string">&quot;EndpointID&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;f988865f7415ffe5442ff8917fc325b738054cba69738f90673813c85cde6b92&quot;</span>,
                <span class="token string">&quot;MacAddress&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;02:42:ac:11:00:02&quot;</span>,
                <span class="token string">&quot;IPv4Address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;172.17.0.2/16&quot;</span>,
                <span class="token string">&quot;IPv6Address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>
            <span class="token punctuation">}</span>,
            <span class="token string">&quot;fca1467bc863fea6af9453577a1c3a1cbedc5d7b55455ffcc54dad5ae5f1667e&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;Name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;bb1&quot;</span>,
                <span class="token string">&quot;EndpointID&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;8e482be1c2b6a012117b8b30192b1a9a2ce2ccfce8a65657f89e8ae6f19a7c9f&quot;</span>,
                <span class="token string">&quot;MacAddress&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;02:42:ac:11:00:03&quot;</span>,
                <span class="token string">&quot;IPv4Address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;172.17.0.3/16&quot;</span>,
                <span class="token string">&quot;IPv6Address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>,
<span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查看容器接口-1" tabindex="-1"><a class="header-anchor" href="#查看容器接口-1" aria-hidden="true">#</a> 查看容器接口</h4><p>此时查看 bb1 的网络接口情况，发现其同时具有两个网络接口，分别连接在两个不同的网络上。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> bb1 <span class="token function">ip</span> a
<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noqueue qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
<span class="token number">37</span>: eth0@if38: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue
    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.17</span>.0.3/16 brd <span class="token number">172.17</span>.255.255 scope global eth0
       valid_lft forever preferred_lft forever
<span class="token number">39</span>: eth1@if40: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue
    link/ether 02:42:ac:12:00:03 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.18</span>.0.3/16 brd <span class="token number">172.18</span>.255.255 scope global eth1
       valid_lft forever preferred_lft forever
<span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查看容器详情-1" tabindex="-1"><a class="header-anchor" href="#查看容器详情-1" aria-hidden="true">#</a> 查看容器详情</h4><p>查看 bb1 容器详情，可以看到其连接在两个网络上，具有两个 IP。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect bb1
<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token string">&quot;Networks&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;bridge&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
                    <span class="token string">&quot;IPAMConfig&quot;</span><span class="token builtin class-name">:</span> null,
                    <span class="token string">&quot;Links&quot;</span><span class="token builtin class-name">:</span> null,
                    <span class="token string">&quot;Aliases&quot;</span><span class="token builtin class-name">:</span> null,
                    <span class="token string">&quot;NetworkID&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;192c8fb3873c78366d2bfdd96f3004970f3a24d99072914a009e2c473abe9bd1&quot;</span>,
                    <span class="token string">&quot;EndpointID&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;8e482be1c2b6a012117b8b30192b1a9a2ce2ccfce8a65657f89e8ae6f19a7c9f&quot;</span>,
                    <span class="token string">&quot;Gateway&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;172.17.0.1&quot;</span>,
                    <span class="token string">&quot;IPAddress&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;172.17.0.3&quot;</span>,
                    <span class="token string">&quot;IPPrefixLen&quot;</span><span class="token builtin class-name">:</span> <span class="token number">16</span>,
                    <span class="token string">&quot;IPv6Gateway&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
                    <span class="token string">&quot;GlobalIPv6Address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
                    <span class="token string">&quot;GlobalIPv6PrefixLen&quot;</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,
                    <span class="token string">&quot;MacAddress&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;02:42:ac:11:00:03&quot;</span>,
                    <span class="token string">&quot;DriverOpts&quot;</span><span class="token builtin class-name">:</span> null
                <span class="token punctuation">}</span>,
                <span class="token string">&quot;bridge2&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
                    <span class="token string">&quot;IPAMConfig&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>,
                    <span class="token string">&quot;Links&quot;</span><span class="token builtin class-name">:</span> null,
                    <span class="token string">&quot;Aliases&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
                        <span class="token string">&quot;fca1467bc863&quot;</span>
                    <span class="token punctuation">]</span>,
                    <span class="token string">&quot;NetworkID&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;a19ca8dcfc5a2b5f021e3ea7d2b1708fb7d7a143796a9f338e043db51ce721f7&quot;</span>,
                    <span class="token string">&quot;EndpointID&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;c5ea77741b223c9da6c369b6be4cfdc3b10db427b3bc0c018a6970337a42b179&quot;</span>,
                    <span class="token string">&quot;Gateway&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;172.18.0.1&quot;</span>,
                    <span class="token string">&quot;IPAddress&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;172.18.0.3&quot;</span>,
                    <span class="token string">&quot;IPPrefixLen&quot;</span><span class="token builtin class-name">:</span> <span class="token number">16</span>,
                    <span class="token string">&quot;IPv6Gateway&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
                    <span class="token string">&quot;GlobalIPv6Address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
                    <span class="token string">&quot;GlobalIPv6PrefixLen&quot;</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,
                    <span class="token string">&quot;MacAddress&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;02:42:ac:12:00:03&quot;</span>,
                    <span class="token string">&quot;DriverOpts&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="容器互-ping" tabindex="-1"><a class="header-anchor" href="#容器互-ping" aria-hidden="true">#</a> 容器互 ping</h4><p>容器 bb 与 bb1 互 ping 是可以 ping 通的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#bb</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> bb <span class="token function">ping</span> <span class="token number">172.18</span>.0.3 <span class="token parameter variable">-c</span> <span class="token number">3</span>
<span class="token comment">#bb1</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> bb1 <span class="token function">ping</span> <span class="token number">172.18</span>.0.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但 bb 要 ping 容器 bb1 的另一网段的 IP 是 ping 不通的。❌</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> bb <span class="token function">ping</span> <span class="token number">172.17</span>.0.3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="容器互-ping-容器名" tabindex="-1"><a class="header-anchor" href="#容器互-ping-容器名" aria-hidden="true">#</a> 容器互 ping 容器名</h4><p>除了可以直接 ping 通指定的 IP 外，还可以直接去 ping 对方的容器名称。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> bb <span class="token function">ping</span> bb1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该方式在生产中非常重要。因为生产中容器的 IP 可能会发生变化，但容器名称一般是 不会变的。如果某服务总是直接通过 IP 与容器相连接，那么一旦容器 IP 变化，则该服务将 连接不上容器。但如果是通过容器名称相连接的，那么无论容器 IP 如何变化，都将不影响 服务与容器的连接。</p><h4 id="创建定向连接容器" tabindex="-1"><a class="header-anchor" href="#创建定向连接容器" aria-hidden="true">#</a> 创建定向连接容器</h4><p>对于自定义的 bridge 网络，其具有一个特性：该网络上的容器可以通过容器名互 ping。 但默认的 bridge 网络是不行的。如果在默认的 bridge 网络上实现通过容器名进行的连接， 则需要创建容器时通过--link 选项指定。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> bb2 <span class="token parameter variable">--link</span> bb1 busybox /bin/sh <span class="token parameter variable">-c</span> <span class="token string">&quot;while true; do sleep 3600; done&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时容器 bb2 直接通过 bb1 的容器名称就是连接上 bb1。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> bb2 <span class="token function">ping</span> bb1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但容器 bb2 是无法通过容器名称来连接 bb 的。然后 bb1 也无法通过容器名称连接 bb2。</p><p>所以，--link 指定的连接是一种定向连接，是带有指向性与方向性的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> bb2 <span class="token function">ping</span> bb
^C
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> bb1 <span class="token function">ping</span> bb2
ping: bad address <span class="token string">&#39;bb2&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建共享网络命名空间容器" tabindex="-1"><a class="header-anchor" href="#创建共享网络命名空间容器" aria-hidden="true">#</a> 创建共享网络命名空间容器</h4><p>在创建容器时可以指定其与某已经存在的容器共享 Network Namespace，但要求该已经存在的容器采用的是 bridge 网络模式。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> bb1-1 <span class="token parameter variable">--network</span> container:bb1 busybox /bin/sh <span class="token parameter variable">-c</span> <span class="token string">&quot;while true; do sleep 3600; done&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的命令创建了一个 bb1-1 的容器，其共享了 bb1 容器的 Network Namespace。 查看两个容器的接口情况，发现完全相同。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#bb1-1</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> bb1-1 <span class="token function">ip</span> a
<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noqueue qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
<span class="token number">37</span>: eth0@if38: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue
    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.17</span>.0.3/16 brd <span class="token number">172.17</span>.255.255 scope global eth0
       valid_lft forever preferred_lft forever
<span class="token number">39</span>: eth1@if40: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue
    link/ether 02:42:ac:12:00:03 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.18</span>.0.3/16 brd <span class="token number">172.18</span>.255.255 scope global eth1
       valid_lft forever preferred_lft forever
<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token comment">#bb1</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> bb1 <span class="token function">ip</span> a
<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noqueue qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
<span class="token number">37</span>: eth0@if38: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue
    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.17</span>.0.3/16 brd <span class="token number">172.17</span>.255.255 scope global eth0
       valid_lft forever preferred_lft forever
<span class="token number">39</span>: eth1@if40: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue
    link/ether 02:42:ac:12:00:03 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.18</span>.0.3/16 brd <span class="token number">172.18</span>.255.255 scope global eth1
       valid_lft forever preferred_lft forever
<span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看容器 bb1-1 的详情，可以发现，其没有自身的网络设置。因为其共享的 bb1 容器的网络设置。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect bb1-1
<span class="token punctuation">..</span><span class="token punctuation">..</span>
 <span class="token string">&quot;NetworkSettings&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;Bridge&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
            <span class="token string">&quot;SandboxID&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
            <span class="token string">&quot;HairpinMode&quot;</span><span class="token builtin class-name">:</span> false,
            <span class="token string">&quot;LinkLocalIPv6Address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
            <span class="token string">&quot;LinkLocalIPv6PrefixLen&quot;</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,
            <span class="token string">&quot;Ports&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>,
            <span class="token string">&quot;SandboxKey&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
            <span class="token string">&quot;SecondaryIPAddresses&quot;</span><span class="token builtin class-name">:</span> null,
            <span class="token string">&quot;SecondaryIPv6Addresses&quot;</span><span class="token builtin class-name">:</span> null,
            <span class="token string">&quot;EndpointID&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
            <span class="token string">&quot;Gateway&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
            <span class="token string">&quot;GlobalIPv6Address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
            <span class="token string">&quot;GlobalIPv6PrefixLen&quot;</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,
            <span class="token string">&quot;IPAddress&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
            <span class="token string">&quot;IPPrefixLen&quot;</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,
            <span class="token string">&quot;IPv6Gateway&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
            <span class="token string">&quot;MacAddress&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
            <span class="token string">&quot;Networks&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="none-网络" tabindex="-1"><a class="header-anchor" href="#none-网络" aria-hidden="true">#</a> none 网络</h2><p>none 网络，即没有网络。容器仍是一个独立的 Network Namespace，但没有网络接口， 没有 IP。</p><h3 id="创建-none-网络容器" tabindex="-1"><a class="header-anchor" href="#创建-none-网络容器" aria-hidden="true">#</a> 创建 none 网络容器</h3><p>在 docker run 命令中，通过--network none 选项指定创建的容器没有网络功能。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> bb3 <span class="token parameter variable">--network</span> none busybox /bin/sh <span class="token parameter variable">-c</span> <span class="token string">&quot;while true; do sleep 3600; done&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看容器详情-2" tabindex="-1"><a class="header-anchor" href="#查看容器详情-2" aria-hidden="true">#</a> 查看容器详情</h3><p>通过 docker inspect 命令查看该容器的详情，发现其没有 IP，没有网关，没有 MAC 地址。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect bb3
<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token string">&quot;Networks&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;none&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
                    <span class="token string">&quot;IPAMConfig&quot;</span><span class="token builtin class-name">:</span> null,
                    <span class="token string">&quot;Links&quot;</span><span class="token builtin class-name">:</span> null,
                    <span class="token string">&quot;Aliases&quot;</span><span class="token builtin class-name">:</span> null,
                    <span class="token string">&quot;NetworkID&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;ea6673259f3e4fe0ba522e76289599b5431f10c15561ac7a527018ea882cf8d1&quot;</span>,
                    <span class="token string">&quot;EndpointID&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;1e0bdd22f193dc6ec88cfb1c6311094c03867f20d64237a8def3c41f98818664&quot;</span>,
                    <span class="token string">&quot;Gateway&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
                    <span class="token string">&quot;IPAddress&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
                    <span class="token string">&quot;IPPrefixLen&quot;</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,
                    <span class="token string">&quot;IPv6Gateway&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
                    <span class="token string">&quot;GlobalIPv6Address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
                    <span class="token string">&quot;GlobalIPv6PrefixLen&quot;</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,
                    <span class="token string">&quot;MacAddress&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
                    <span class="token string">&quot;DriverOpts&quot;</span><span class="token builtin class-name">:</span> null
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看容器网络接口" tabindex="-1"><a class="header-anchor" href="#查看容器网络接口" aria-hidden="true">#</a> 查看容器网络接口</h3><p>通过 ip a 命令查看容器的网络接口，发现其只有一个回环地址 lo，没有其它接口。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> bb3 <span class="token function">ip</span> a
<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noqueue qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
<span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="host-网络" tabindex="-1"><a class="header-anchor" href="#host-网络" aria-hidden="true">#</a> host 网络</h2><p>host 网络，即与宿主机 host 共用一个 Network Namespace。该网络类型的容器没有独立 的网络空间，没有独立的 IP，全部与 host 共用。</p><h3 id="创建-host-网络容器" tabindex="-1"><a class="header-anchor" href="#创建-host-网络容器" aria-hidden="true">#</a> 创建 host 网络容器</h3><p>在 docker run 命令中，通过--network host 选项指定创建的容器为 host 网络。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> bb4 <span class="token parameter variable">--network</span> <span class="token function">host</span> busybox /bin/sh <span class="token parameter variable">-c</span> <span class="token string">&quot;while true; do sleep 3600; done&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看网络详情" tabindex="-1"><a class="header-anchor" href="#查看网络详情" aria-hidden="true">#</a> 查看网络详情</h3><p>通过 docker network inspect host 命令查看网络详情，发现容器 bb4 连接在该网络上，但容器 bb4 却没有 IP、MAC，并且该网络模式中没有网关 Gateway。因为该网络模式实际相当于没有网络，容器与宿主机共用 Network Namespace，根本就不需要网络连接。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network inspect <span class="token function">host</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span>
 <span class="token string">&quot;Containers&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;3d8343ce59c192370ccf2d81e70edc5703e8fd8c3309c6dda791486d2c8fb1dd&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;Name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;bb4&quot;</span>,
                <span class="token string">&quot;EndpointID&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;0a6a4d1b4a0bf3bba480e87644182a2631c59d10916a9f2dfcc26fa96f2e1dd3&quot;</span>,
                <span class="token string">&quot;MacAddress&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
                <span class="token string">&quot;IPv4Address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
                <span class="token string">&quot;IPv6Address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>,
<span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看-host-与容器网络接口" tabindex="-1"><a class="header-anchor" href="#查看-host-与容器网络接口" aria-hidden="true">#</a> 查看 host 与容器网络接口</h3><p>通过 ip a 与 docker exec bb4 ip a 命令分别查看宿主机与容器 bb4 的网络接口，发现是一 样的。因为它们共用一个 Network Namespace，所以也就共用了所有网络接口。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect bb4
<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token string">&quot;Networks&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;host&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
                    <span class="token string">&quot;IPAMConfig&quot;</span><span class="token builtin class-name">:</span> null,
                    <span class="token string">&quot;Links&quot;</span><span class="token builtin class-name">:</span> null,
                    <span class="token string">&quot;Aliases&quot;</span><span class="token builtin class-name">:</span> null,
                    <span class="token string">&quot;NetworkID&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;c3167c0817bcf33e9170b9ddc3b578c34526ff10e7f1710b5f93cf09d749ca1a&quot;</span>,
                    <span class="token string">&quot;EndpointID&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;0a6a4d1b4a0bf3bba480e87644182a2631c59d10916a9f2dfcc26fa96f2e1dd3&quot;</span>,
                    <span class="token string">&quot;Gateway&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
                    <span class="token string">&quot;IPAddress&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
                    <span class="token string">&quot;IPPrefixLen&quot;</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,
                    <span class="token string">&quot;IPv6Gateway&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
                    <span class="token string">&quot;GlobalIPv6Address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
                    <span class="token string">&quot;GlobalIPv6PrefixLen&quot;</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,
                    <span class="token string">&quot;MacAddress&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
                    <span class="token string">&quot;DriverOpts&quot;</span><span class="token builtin class-name">:</span> null
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关于端口映射" tabindex="-1"><a class="header-anchor" href="#关于端口映射" aria-hidden="true">#</a> 关于端口映射</h3><p>由于容器与宿主机共用一个 Network Namespace，所以无论是 IP 还是应用程序的 Port， 容器与宿主机的都是相同的，所以对于容器中应用程序的 Port 不存在映射的问题，host 中 的 Port 与容器中的 Port 相同。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mytomcat <span class="token parameter variable">--network</span> <span class="token function">host</span> <span class="token parameter variable">-dp</span> <span class="token number">8081</span>:8080 tomcat:8.5.49
<span class="token comment">#no tomcat execute</span>
<span class="token function">docker</span> pull tomcat:8.5.49
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 tomcat 容器由于指定了网络模式为 host，在启动时指定的端口映射不会起作用。 系统给出的 WARNING 指出，当使用 host 网络模式时，已发布的端口号被丢弃。 此时，通过仍需通过 8080 端口访问。</p><p>也正因为 host 与容器中的应用使用的是相同的端口号，所以当采用 host 网络模式时， 在一个宿主机中只能启动一个应用的一个容器，否则会出现端口号冲突问题。</p><h2 id="after-all" tabindex="-1"><a class="header-anchor" href="#after-all" aria-hidden="true">#</a> AFTER ALL</h2><h3 id="docker-网络理论基础" tabindex="-1"><a class="header-anchor" href="#docker-网络理论基础" aria-hidden="true">#</a> Docker 网络理论基础</h3><p>一个 Network Namespece 就代表一个独立的主机。一个容器就对应一个 Namespece，所 以一个容器就代表了网络中的一个独立主机。 CNM 是规范，Libnetwork 是 CNM 规范的实现，Driver 是 Libnetwork 中不同网络模式的实现。</p><h3 id="bridge-网络-1" tabindex="-1"><a class="header-anchor" href="#bridge-网络-1" aria-hidden="true">#</a> bridge 网络</h3><p>加入网络的容器具有独立的 namespace，具有自己独立的网络接口与 IP。默认的网络模 式，是使用最多的网络模式。</p><h3 id="none-网络-1" tabindex="-1"><a class="header-anchor" href="#none-网络-1" aria-hidden="true">#</a> none 网络</h3><p>加入网络的容器具有独立的 namespace，但其根本就没有连接外网的网络接口，也就不可能会有 IP 了。</p><h3 id="host-网络-1" tabindex="-1"><a class="header-anchor" href="#host-网络-1" aria-hidden="true">#</a> host 网络</h3><p>加入网络的容器没有自己独立的 namespace，没有自己独立的网络接口与 IP，全部与宿主机共享。 加入网络的容器无需再暴露端口号了，其端口号直接就在宿主机的 namespce 中。</p>`,192),l=[t];function p(c,o){return s(),a("div",null,l)}const d=n(i,[["render",p],["__file","dockerNetwork.html.vue"]]);export{d as default};
