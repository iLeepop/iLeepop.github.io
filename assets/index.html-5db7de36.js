import{_ as o,r as i,o as h,c as d,b as r,d as e,e as n,a as c}from"./app-5539d687.js";const t={},s=c('<h1 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h1><p>Docker 是一个开源的应用容器 Container 引擎， 其可以让开发者将应用及应用运行的 环境打包到一个轻量级、可移植的镜像中，然后发布到任何流行的 Linux、Windows 机器上。 Docker 原本是由一个 PaaS 提供商 dotCloud 公司的创始人 Solomon Hykes 发起的一个内 部项目，是基于其多年云服务技术的一次革新，使用 Go 语言开发。2013 年 3 月开源，并 在 GitHub 上进行维护。后由于 Docker 项目的火爆，2013 年底，dotCloud 公司更名为 Docker， 公司域名也变更为了 https://docker.com。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><strong>云计算中的服务包括三个层次</strong> IaaS、PaaS、SaaS。</p></div><p><strong>Docker LOGO 的由来</strong></p><p>Container 这个单词的意思不仅有“容器”，还有“集装箱”。这就是为什么 LOGO 中出现很多集装箱的原因。至于鲸鱼，是在众多 LOGO 方案中由网友投票投出的结果，Docker 名称的含义为码头工人，即操作集装箱的人。</p><h2 id="用途" tabindex="-1"><a class="header-anchor" href="#用途" aria-hidden="true">#</a> 用途</h2><p>可以将应用与环境打包为镜像，然后可以实现“一处可运行，处处可运行”。</p><h3 id="提供统一的运行环境" tabindex="-1"><a class="header-anchor" href="#提供统一的运行环境" aria-hidden="true">#</a> 提供统一的运行环境</h3><p>在生产环境中，很多时候的开发、测试及上线环境都是不一样的，从而导致项目（war 或 jar）在不同阶段出现很多其它阶段所不存在的奇怪的问题。</p><p>Docker 容器除了可以提供相同的应用外，还提供了该应用的统一运行环境，确保在任何宿主机 HOST 上都可以跑出相同的结果。即 Docker = jar/war + 环境。</p><h3 id="便捷的应用迁移" tabindex="-1"><a class="header-anchor" href="#便捷的应用迁移" aria-hidden="true">#</a> 便捷的应用迁移</h3><p>由于 Docker 确保了统一的运行环境，使得应用的迁移更加便捷。无论是物理机、虚拟机、公有云、私有云，Docker 镜像的运行结果都是相同的。用户可以很方便地将一个平台上运行的应用，迁移到另一个平台上，而无需担心运行环境的变化导致应用无法正常运行。</p><h3 id="超快的启动时间" tabindex="-1"><a class="header-anchor" href="#超快的启动时间" aria-hidden="true">#</a> 超快的启动时间</h3><p>传统的虚拟机技术启动应用一般需要数分钟：首先需要启动虚拟机，然后再加载虚拟机操作系统，最后还需要再手工启动应用。而 Docker 容器应用，由于直接运行于宿主机系统中，无需启动操作系统，因此可以做到秒级、甚至毫秒级的启动。</p><h3 id="更轻松的维护和扩展" tabindex="-1"><a class="header-anchor" href="#更轻松的维护和扩展" aria-hidden="true">#</a> 更轻松的维护和扩展</h3><p>Docker 公司及各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p><p>Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。</p><h2 id="容器与虚拟机的区别" tabindex="-1"><a class="header-anchor" href="#容器与虚拟机的区别" aria-hidden="true">#</a> 容器与虚拟机的区别</h2><p>Docker 容器的本质就是通过容器虚拟技术虚拟出的一台主机，就像虚拟机一样。可以将应用及其运行环境部署在这台虚拟出的主机上运行。但容器与虚拟机又有着本质的不同。</p><p>容器与虚拟机的最大区别是，虚拟机中存在独立的硬件系统与操作系统，但容器中的全 部是共享的宿主机中的操作系统与硬件系统。</p><h3 id="普通系统中的程序运行原理" tabindex="-1"><a class="header-anchor" href="#普通系统中的程序运行原理" aria-hidden="true">#</a> 普通系统中的程序运行原理</h3><p>程序是一个对计算机硬件资源调度使用的指令序列。</p><h3 id="传统虚拟技术" tabindex="-1"><a class="header-anchor" href="#传统虚拟技术" aria-hidden="true">#</a> 传统虚拟技术</h3><p>传统的虚拟技术是在物理机的操作系统之上安装一个虚拟机管理程序，例如 VMware、VirtualBox 等。在其管理下可以创建很多个虚拟机。每个虚拟机需要安装自己独立的操作系统，而应用就是安装在虚拟机操作系统之上的程序，应用程序通过调用各种命令或库函数来使用其需要的各种系统资源。</p><p>对于完全相同的两个应用，其若需要运行在两个虚拟机中，则就需要两套完全相同的虚 拟机操作系统与 bins/libs，存在大量的资源占用冗余。形成资源浪费。</p><h3 id="容器虚拟化技术" tabindex="-1"><a class="header-anchor" href="#容器虚拟化技术" aria-hidden="true">#</a> 容器虚拟化技术</h3><p>Docker 容器运行在 Docker 引擎之上，所有 Docker 容器共享同一个 Docker 引擎，但它们的运行又是相互隔离、互不干扰的。由于 Docker 容器不需要进行虚拟硬件及操作系统，而是共享的宿主机的硬件与操作系统，所以 Docker 容器对系统资源的占用很少，其仅包含运行时必须的一些资源。所有 Docker 容器对于系统资源的使用都是由 Docker 引擎统一进行管理，所以对系统资源的利用率很高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。</p><h2 id="windows-系统的虚拟化" tabindex="-1"><a class="header-anchor" href="#windows-系统的虚拟化" aria-hidden="true">#</a> Windows 系统的虚拟化</h2><p>Hypervisor 操作系统与硬件系统之间，用于实现多个虚拟机共享 宿主机的硬件系统。</p><p>Hyper-V 它是微软提供的商业化 Hypervisor，运行在 windows 系统上。</p><p>KVM 与 Xen 是 Linux 系统上的开源的 Hypervisor 。</p><p>Windows 系统的架构 操作系统与应用层分别是两个虚拟机，位于 Hyper-V 之上。</p><p>VMware Workstation 对 VMM 虚拟机技术进行了重 构，由原来需要直接调用 CPU 的虚拟化功能，改变为了通过调用 Win10 系统的 WHP（Windows Hypervisor Platform）的 API 来运行。解决了 VMware Workstation 与 Hyper-V 的不兼容问题。</p><h3 id="hypervisor" tabindex="-1"><a class="header-anchor" href="#hypervisor" aria-hidden="true">#</a> Hypervisor</h3><p>Hypervisor 是一种运行在基础物理服务器和操作系统之间的中间软件层，可允许多个操作系统和应用共享硬件。也可叫做 VMM（ virtual machine monitor ），即虚拟机监视器。Hypervisors 是一种在虚拟环境中的“元”操作系统。他们可以访问服务器上包括磁盘和内存在内的所有物理设备。Hypervisors 不但协调着这些硬件资源的访问，也同时在各个虚拟机之间施加防护。当服务器启动并执行 Hypervisor 时，它会加载所有虚拟机客户端的操作系统同时会分配给每一台虚拟机适量的内存，CPU，网络和磁盘。</p><h3 id="hyper-v" tabindex="-1"><a class="header-anchor" href="#hyper-v" aria-hidden="true">#</a> Hyper-V</h3><p>Hyper-V 是微软的一款虚拟化产品，是微软第一个采用类似 Vmware ESXi 和 Citrix Xen 的基于 hypervisor 的技术。这也意味着微软会更加直接地与市场先行者 VMware 展开竞争，但竞争的方式会有所不同。Hyper-V 是微软提出的一种系统管理程序虚拟化技术，能够实现桌面虚拟化。</p><p>Hyper-V 是微软提供的商业化的 Hypervisor。KVM 与 Xen 都是 Linux 系统之上的开源的 Hypervisor。</p><h2 id="docker-系统架构" tabindex="-1"><a class="header-anchor" href="#docker-系统架构" aria-hidden="true">#</a> Docker 系统架构</h2><p>Docker 中具有几个非常重要的概念，下面通过理解这些概念来了解 Docker 的系统架构。</p><h3 id="docker-daemon" tabindex="-1"><a class="header-anchor" href="#docker-daemon" aria-hidden="true">#</a> Docker Daemon</h3><p>Docker Daemon，即 Dockerd，Docker 守护进程，其监听着 Docker API 请求并管理 Docker 对象，例如镜像、容器、网络和卷。守护进程还可以与其他守护进程通信以管理 Docker 服 务。</p><h3 id="镜像-image" tabindex="-1"><a class="header-anchor" href="#镜像-image" aria-hidden="true">#</a> 镜像 Image</h3><p>Docker 镜像是用于创建 Docker 容器的模板。就像面向对象编程中的类。</p><h3 id="容器-container" tabindex="-1"><a class="header-anchor" href="#容器-container" aria-hidden="true">#</a> 容器 Container</h3><p>Docker 容器是镜像运行时的实体。就像面向对象编程中类的实例。一个类可以创建出 N 多个实例，那么一个镜像同样也可以创建出 N 多个容器。每个处于运行状态的容器中都包含着一个或多个相关的应用，且它的运行不会干扰到其它容器。因为它们之间是相互隔离的。</p><h3 id="仓库-repository" tabindex="-1"><a class="header-anchor" href="#仓库-repository" aria-hidden="true">#</a> 仓库 Repository</h3><p>Docker 镜像仓库用来保存相关的一组镜像，这组镜像具有相同的镜像名称，都与镜像仓库名称相同。仓库根据其中的镜像是否可以被公开共享，可以分为公开库与私有库。</p><h3 id="标签-tag" tabindex="-1"><a class="header-anchor" href="#标签-tag" aria-hidden="true">#</a> 标签 Tag</h3><p>通过 repository[:tag]即可唯一定位一个镜像。即镜像标签其实就是镜像仓库中用于区分各个镜像的一种标识，同一仓库中的镜像具有不同的标签。</p><h3 id="镜像中心-registry" tabindex="-1"><a class="header-anchor" href="#镜像中心-registry" aria-hidden="true">#</a> 镜像中心 Registry</h3>',51),p={href:"https://hub.docker.com",target:"_blank",rel:"noopener noreferrer"};function k(l,D){const a=i("ExternalLinkIcon");return h(),d("div",null,[s,r("p",null,[e("Docker 的镜像中心中存放着很多由官方、其他机构或个人创建的 Docker 仓库，Docker 用户可以直接从这些仓库中 pull 需要的镜像，也可以将自己制作的镜像 push 到 Docker 镜像中心相应的仓库中。最常用的镜像中心是 Docker 官方的"),r("a",p,[e("Docker Hub"),n(a)]),e("。")])])}const x=o(t,[["render",k],["__file","index.html.vue"]]);export{x as default};
