import{_ as n,o as t,c as a,b as e,d as o}from"./app-5539d687.js";const s={},l=e("h1",{id:"负载均衡",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#负载均衡","aria-hidden":"true"},"#"),o(" 负载均衡")],-1),i=e("p",null,"负载均衡建立在现有网络结构之上，它提供了一种廉价有效透明的方法扩展网络设备和服务器的带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。 负载均衡（Load Balance）其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。",-1),c=e("p",null,"简单来说就是：现有的请求使服务器压力太大无法承受，所有我们需要搭建一个服务器集群，去分担原先一个服务器所承受的压力，那现在我们有ABCD等等多台服务器，我们需要把请求分给这些服务器，但是服务器可能大小也有自己的不同，所以怎么分？如何分配更好？又是一个问题。",-1),_=e("p",null,"Nginx给出来三种关于负载均衡的方式：",-1),h=e("ol",null,[e("li",null,"轮询法（默认方法）： 每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。 适合服务器配置相当，无状态且短平快的服务使用。也适用于图片服务器集群和纯静态页面服务器集群。"),e("li",null,"weight权重模式（加权轮询）： 指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的 情况。 这种方式比较灵活，当后端服务器性能存在差异的时候，通过配置权重，可以让服务器的性能得到充分发挥，有效利用资源。weight和访问比率成正比，用于后端服务器性能不均的情况。权重越高，在被访问的概率越大"),e("li",null,"ip_hash： 上述方式存在一个问题就是说，在负载均衡系统中，假如用户在某台服务器上登录了，那么该用户第二次请求的时候，因为我们是负载均衡系统，每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失，这样显然是不妥的。 我们可以采用ip_hash指令解决这个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。")],-1),d=[l,i,c,_,h];function r(u,p){return t(),a("div",null,d)}const x=n(s,[["render",r],["__file","nginxServerLoadBalance.html.vue"]]);export{x as default};
